{"version":3,"file":"romainmarecat-ngx-calendar.umd.js","sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.service.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts"],"sourcesContent":["export interface Event {\n  id: string;\n  start: Date;\n  end: Date;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: any;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Session } from './session';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  sessionsEntries$: BehaviorSubject<Session[]> = new BehaviorSubject<Session[]>([]);\n\n  sessions: BehaviorSubject<Map<string, Session>> = new BehaviorSubject<Map<string, Session>>(new Map<string, Session>());\n\n  constructor() {\n  }\n}\n","<div class=\"calendar-body-wrapper\">\n  <table class=\"calendar-body-table-wrapper table table-bordered\">\n    <thead class=\"calendar-body-table-head\">\n    <tr class=\"calendar-body-head-day-row\"\n        *ngIf=\"viewMode !== 'day'\">\n      <th class=\"calendar-body-day-header text-center\"\n          *ngFor=\"let day of days\">\n        <span class=\"truncate\">{{ day.title }}</span>\n      </th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class=\"calendar-body-row\">\n      <td class=\"calendar-body-column-content text-center\"\n          [attr.id]=\"day.key\"\n          *ngFor=\"let day of days; let keyDay = index\">\n        <div class=\"time-slot\"\n             [class.busy]=\"isSlotBusy(day, time)\"\n             [class.early]=\"isSlotEarly(day, time)\"\n             [class.session]=\"isSlotInSession(day, time)\"\n             [class.session-start]=\"isSlotSessionStart(day, time)\"\n             [class.session-end]=\"isSlotSessionEnd(day, time)\"\n             *ngFor=\"let time of getAvailabilities(day.key)\">\n          <div class=\"time-content\">\n            <button type=\"button\"\n                    class=\"slot-available\"\n                    (click)=\"onTimeSlotClicked(day, time)\"\n                    *ngIf=\"!isDateTimeInSessionsFromCurrentUser(day, time); else sessionTitle\">\n              <span class=\"default-time\">{{ time }}</span>\n            </button>\n            <ng-template #sessionTitle>\n              <button type=\"button\"\n                      class=\"slot-session\">\n                {{ getSessionTitle(day, time)}}\n              </button>\n            </ng-template>\n            <a class=\"link-close\" (click)=\"onTimeSlotClicked(day, time)\">\n              <mat-icon class=\"icon-close\"\n                        *ngIf=\"isDateTimeInSessionsFromCurrentUser(day, time)\">\n                close\n              </mat-icon>\n            </a>\n          </div>\n          <div class=\"slot-busy\"\n               *ngIf=\"getAvailabilities(day.key).length <= 0 || isDayBusy(day, time)\">\n            <span>{{bodyConfiguration.calendar.availability.empty}}</span>\n          </div>\n        </div>\n        <div class=\"next-slot\"\n             *ngIf=\"isAllSlotNotAvailable() && keyDay === days.length-1\">\n          <button type=\"button\"\n                  role=\"button\"\n                  [title]=\"bodyConfiguration.calendar.availability.slot\"\n                  (click)=\"onNextDay()\">\n            <span>{{ bodyConfiguration.calendar.availability.slot }}</span>\n            <mat-icon>keyboard_arrow_right</mat-icon>\n          </button>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\nimport { SessionService } from '../../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent implements OnInit {\n  /**\n   * User could be passed to show session owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: string;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessionsStartSlots: Set<string>;\n  sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private sessionService: SessionService) {\n  }\n\n  ngOnInit() {\n    this.sessionService.sessions\n      .subscribe((sessions) => {\n        this.sessions = sessions;\n      });\n  }\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): string[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.comment) {\n        return session.comment;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n      return;\n    }\n\n    if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session};\n      this.removeSession(source);\n      return;\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      id: null,\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.pause || 0,\n      duration: this.onlineSession.duration,\n      nb_persons: 1,\n      event_type: EventType.session,\n      comment: this.bodyConfiguration.calendar.session.info,\n      user: this.user,\n      customers: [this.customer]\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return this.sessions &&\n      this.sessions.has(datetime) &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')) &&\n      this.sessionsStartSlots.has(datetime) &&\n      this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm'));\n  }\n\n  isSlotSessionStart(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsStartSlots.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return (this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsEndSlots.has(datetime)) ||\n      (this.sessionsStartSlots.has(datetime) &&\n        session &&\n        this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')));\n  }\n}\n","<div fxLayout=\"row wrap\"\n     fxLayoutAlign=\"start stretch\"\n     fxLayout.xs=\"column\"\n     fxLayoutAlign.xs=\"start center\"\n     fxLayoutGap.xs=\"10px\"\n     *ngIf=\"headerConfiguration\">\n\n  <div class=\"left-actions\"\n       fxLayout=\"row\"\n       fxLayoutAlign=\"start stretch\"\n       fxLayoutGap=\"10px\"\n       fxLayout.xs=\"row\"\n       fxLayoutAlign.xs=\"center stretch\"\n       fxLayoutGap.xs=\"10px\">\n    <button class=\"button-actions\"\n            (click)=\"previousDay()\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.cta.previous\">\n      <mat-icon>keyboard_arrow_left</mat-icon>\n    </button>\n    <button class=\"button-actions\"\n            (click)=\"nextDay()\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.cta.next\">\n      <mat-icon>keyboard_arrow_right</mat-icon>\n    </button>\n    <button class=\"button-actions\"\n            [title]=\"headerConfiguration.calendar.back_today\"\n            [disabled]=\"isToday()\"\n            (click)=\"goToToday()\"\n            role=\"button\">\n      <mat-icon>today</mat-icon>\n    </button>\n  </div>\n  <div class=\"right-actions\"\n       fxLayout=\"row wrap\"\n       fxLayoutAlign=\"end stretch\"\n       fxLayoutGap=\"10px\"\n       fxLayout.xs=\"row wrap\"\n       fxLayoutAlign.xs=\"center stretch\"\n       fxLayoutGap.xs=\"10px\">\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.today\"\n            [disabled]=\"true\"\n            [class.hide-on-small-only]=\"end?.format('YYYY-MM-DD') !== start?.format('YYYY-MM-DD')\">\n      <span>{{ start?.format('LL') }}</span>\n      <span *ngIf=\"end?.format('YYYY-MM-DD') !== start?.format('YYYY-MM-DD')\">\n        - {{ end?.format('LL') }}\n      </span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.week\"\n            [class.active]=\"viewMode === 'week'\"\n            (click)=\"switchView('week')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_week</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.week }}</span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.three_days\"\n            [class.active]=\"viewMode === 'three_days'\"\n            (click)=\"switchView('three_days')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_column</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.three_days }}</span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.day\"\n            [class.active]=\"viewMode === 'day'\"\n            (click)=\"switchView('day')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_day</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.day }}</span>\n    </button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: string;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: string) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: string) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","<div class=\"week-calendar-wrapper\">\n  <div class=\"week-calendar-header\">\n\n\n    <div class=\"week-calendar-title\">\n\n      <lib-calendar-header [start]=\"start\"\n                           [end]=\"end\"\n                           [headerConfiguration]=\"calendarConfiguration\"\n                           [viewMode]=\"viewMode\"\n                           (switchedView)=\"onSwithedView($event)\"\n                           (startChanged)=\"onStartChanged($event)\"></lib-calendar-header>\n\n    </div>\n\n  </div>\n\n  <div>\n\n\n    <lib-calendar-body [bodyConfiguration]=\"calendarConfiguration\"\n                       [onlineSession]=\"onlineSession\"\n                       [days]=\"days\"\n                       [viewMode]=\"viewMode\"\n                       [start]=\"start\"\n                       [end]=\"end\"\n                       [daysAvailability]=\"daysAvailability\"\n                       [daysBusySlotNumber]=\"daysBusySlotNumber\"\n                       [daysAvailabilitySlotNumber]=\"daysAvailabilitySlotNumber\"\n                       [busySlots]=\"busySlots\"\n                       [user]=\"user\"\n                       [customer]=\"customer\"\n                       [earlySlots]=\"earlySlots\"\n                       [pauseSlots]=\"pauseSlots\"\n                       [sessionsSlots]=\"sessionsSlots\"\n                       [sessionsStartSlots]=\"sessionsStartSlots\"\n                       [sessionsEndSlots]=\"sessionsEndSlots\"\n                       (startChanged)=\"onStartChanged($event)\"\n                       (sessionAdded)=\"onSessionAdded($event)\"\n                       (sessionRemoved)=\"onSessionRemoved($event)\"\n                       *ngIf=\"start && end && days && viewMode\"></lib-calendar-body>\n\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { SessionService } from '../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to show the owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    id: null,\n    comment: '',\n    name: '',\n    max_persons: 1,\n    booking_delay: 1,\n    duration: 15,\n    pause: 0,\n    price: 10,\n    start_date: '2019-01-01',\n    end_date: '2030-12-31',\n    start_time: '08:00',\n    end_time: '19:00'\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsStartSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef,\n              private sessionService: SessionService) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n    }\n    this.loadCalendar();\n  }\n\n  // Default View Mode of Week Component\n  _viewMode = 'week';\n\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.days = [];\n    this.daysAvailability = new Map();\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.sessionsStartSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n    this.sessions = new Map();\n    this.sessionService.sessions.next(this.sessions);\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay).startOf('day');\n    this.end = moment(this.start).add(6, 'days').endOf('day');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.setDateRange(this.start, this.end);\n    this.loadEvents(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: string) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.sessionService.sessions.next(this.sessions);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.sessionService.sessions.next(this.sessions);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.start_date, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.end_date, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.start_time, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.end_time, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlierRange, 'add', session, mmtEarlyStart, mmtStart);\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n    this.handlePauseSlot(timePauseRange, 'add', session, mmtEarlyStart, mmtEarlyEnd);\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlyRange, 'remove', session, mmtEarlyStart, mmtStart);\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n      this.handlePauseSlot(timePauseRange, 'remove', session, mmtEarlyStart, mmtEarlyEnd);\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    if (!this.onlineSession) {\n      return;\n    }\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries.forEach((session: Session) => {\n        if (moment(session.start).isSameOrAfter(start) &&\n          moment(session.end).isSameOrBefore(end)) {\n          this.buildinBusySlot(session);\n          this.buildingEarliestSlot(session);\n        }\n      });\n    }\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(session: Session): Moment {\n    const mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isSameOrBefore(mmtEventEnd)) {\n      console.error('invalid dates', mmtEventStart, mmtEventEnd);\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.duration, 'minutes');\n\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        !this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        if ((!session.customers ||\n          (session.customers &&\n            this.customer &&\n            !session.customers.map(c => c.id).includes(this.customer.id)))) {\n          this.addDayBusySlot(time);\n        }\n        if (session.customers && this.customer && session.customers.map(c => c.id).includes(this.customer.id)) {\n          this.setSessionSlot(eventsTimeRange, time, session);\n        }\n      }\n    }\n    this.sessionService.sessions.next(this.sessions);\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Build in sessions Map only start session with its session\n   */\n  setSessionSlot(eventsTimeRange: TwixIter, time: Twix, session: Session) {\n    this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n    if (!eventsTimeRange.hasNext()) {\n      this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      return;\n    }\n    this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n    this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(session: Session) {\n    const mmtEventStart: Moment = moment(session.start, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !this.realDuration) {\n      return;\n    }\n\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.duration) + this.onlineSession.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.duration);\n      /* IF the busy slot is in availability and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        this.addDayBusySlot(time);\n      }\n    }\n  }\n\n  /**\n   * Add in busy slot new unavailable time reference\n   */\n  addDayBusySlot(time: Twix) {\n    let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n      this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n    dayBusyNumber++;\n    this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n    this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Remove/add from pauseSlot sessions start/end interval\n   */\n  handlePauseSlot(timePauseRange: TwixIter, action: string, session: Session, start: Moment, end: Moment) {\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(start) && mmtTime.isBefore(end)) {\n        if (action === 'remove') {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n        if (action === 'add') {\n          this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove/add from earlySlot all sessions\n   */\n  handleEarlySlot(timeEarlierRange: TwixIter,\n                  action: string,\n                  session: Session,\n                  mmtEarlyStart: Moment,\n                  mmtStart: Moment) {\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        if (action === 'add') {\n          this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n\n        if (action === 'remove') {\n          this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n"],"names":["EventType","BehaviorSubject","Injectable","i0.ÉµÉµelementStart","i0.ÉµÉµtext","i0.ÉµÉµelementEnd","i0.ÉµÉµadvance","i0.ÉµÉµtextInterpolate","i0.ÉµÉµtemplate","i0.ÉµÉµproperty","i0.ÉµÉµlistener","i0.ÉµÉµtextInterpolate1","i0.ÉµÉµclassProp","i0.ÉµÉµattribute","EventEmitter","Component","Input","Output","moment","CommonModule","FlexLayoutModule","MatIconModule","NgModule"],"mappings":"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"}