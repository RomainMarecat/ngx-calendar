{"version":3,"file":"romainmarecat-ngx-calendar.umd.js.map","sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.ts"],"sourcesContent":["export class Event {\n  key?: string;\n  start: Date;\n  end: Date;\n  details: any;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: {\n    uid: string;\n    email: string;\n    displayName: string;\n  };\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: {\n    uid: string;\n    displayName: string;\n    email: string;\n  };\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: String;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): String[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.details.info) {\n        return session.details.info;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time) && !this.isSlotInSession(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.session_type.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n    } else if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session: session};\n      this.removeSession(source);\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.session_type.pause,\n      details: {\n        duration: this.onlineSession.session_type.duration,\n        nb_persons: 1,\n        event_type: EventType.session,\n        info: this.bodyConfiguration.calendar.session.info,\n      },\n      user: {\n        uid: this.user.uid,\n        displayName: this.user.displayName,\n        email: this.user.email,\n      }\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessions && this.sessions.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsEndSlots && this.sessionsEndSlots.has(datetime);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<String> = new EventEmitter<String>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: String;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: String) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: String) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { Event } from '../shared/event/event';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: {\n    uid: string;\n    displayName: string;\n    email: string;\n  };\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    key: null,\n    session_type: {\n      name: '',\n      max_persons: 1,\n      booking_delay: 1,\n      duration: 15,\n      pause: 0,\n    },\n    prices: [10, 20],\n    date_range: {\n      start: '2019-01-01',\n      end: '2030-12-31',\n    },\n    time_range: {\n      start: '08:00',\n      end: '19:00',\n    }\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment;\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment;\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<String> = new EventEmitter<String>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n      this.loadCalendar();\n    }\n  }\n\n  // Default View Mode of Week Component\n  _viewMode: String = 'week';\n\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time: time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  static geStartEndFromStartAndSessionDuration(start: Moment, end: Moment, duration: number): {start: Moment, end: Moment} {\n    const eventsTimeRange: TwixIter = start.twix(end).iterate(duration, 'minutes');\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.sessions = new Map();\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay);\n    this.end = moment(this.start).add(6, 'days');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.loadEvents(this.start, this.end);\n    this.setDateRange(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    this.daysAvailability = new Map();\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    this.days = [];\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: String) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.session_type.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.date_range.start, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.date_range.end, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.time_range.start, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.session_type.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.time_range.end, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.session_type.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.details.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.details.duration) + session.details.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.details.duration, 'minutes');\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.details.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.details.duration, 'minutes');\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n        this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.details.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.details.duration) + session.details.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.details.duration, 'minutes');\n    while (timeEarlyRange.hasNext()) {\n      const time: Twix = timeEarlyRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.details.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.details.duration, 'minutes');\n      while (timePauseRange.hasNext()) {\n        const time: Twix = timePauseRange.next();\n        const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n        if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries = [\n        ...this._sessionsEntries.filter((session: Session) => {\n          if (moment(session.start).isSameOrAfter(start) &&\n            moment(session.end).isSameOrBefore(end)) {\n            let mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n            mmtEventStart = this.buildinBusySlot(mmtEventStart, session);\n            this.buildingEarliestSlot(mmtEventStart);\n\n            return true;\n          }\n\n          return false;\n        })\n      ];\n    }\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(mmtEventStart: Moment, session: Session): Moment {\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isBefore(mmtEventEnd)) {\n      console.error('invalid dates');\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.details.duration, 'minutes');\n\n    let i = 0;\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.details.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n\n        if ((!session.user ||\n          (session.user &&\n            session.user.uid !== this.user.uid))) {\n          let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n            this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n          dayBusyNumber++;\n          this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n          this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n        }\n        if (session.user && session.user.uid === this.user.uid) {\n          this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n          if (!eventsTimeRange.hasNext()) {\n            this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          }\n        }\n      }\n    }\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(mmtEventStart: Moment) {\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.session_type.duration) + this.onlineSession.session_type.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.session_type.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.session_type.duration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatIconModule,\n} from '@angular/material';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n","import { EventType, Event } from '../event/event';\n\nexport class Session extends Event {\n  details: {\n    event_type: EventType,\n    nb_persons: number,\n    duration: number;\n    booking?: any;\n    info: string;\n    customers?: string[];\n  };\n}\n"],"names":["EventEmitter","Component","Input","Output","moment","ChangeDetectorRef","NgModule","CommonModule","FlexLayoutModule","MatIconModule"],"mappings":"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"}
