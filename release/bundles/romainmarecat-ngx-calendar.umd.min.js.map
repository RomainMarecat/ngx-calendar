{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts"],"names":["EventType","absence","session","moment","moment_","CalendarBodyComponent","this","sessionAdded","EventEmitter","sessionRemoved","startChanged","endChanged","slotLocked","prototype","onNextDay","daysNb","viewMode","start","add","emit","isAllSlotNotAvailable","_this","days","length","filter","day","daysAvailability","get","key","getAvailabilities","getSessionTitle","time","datetime","value","format","sessions","has","end","getSessionTooltip","details","info","onTimeSlotClicked","isSlotBusy","isSlotEarly","isDateTimeInSessionsFromCurrentUser","isSlotInSession","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","detail","duration","addSession","Date","toJSON","toDate","pause","nb_persons","event_type","bodyConfiguration","calendar","user","uid","displayName","email","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","sessionsSlots","isSlotSessionEnd","sessionsEndSlots","Component","args","selector","template","Input","Output","CalendarHeaderComponent","switchedView","Object","defineProperty","_viewMode","switchView","onSwitchedView","onStartChanged","goToToday","isToday","previousDay","subtract","nextDay","CalendarComponent","cd","name","max_persons","booking_delay","prices","date_range","time_range","calendarConfiguration","cta","next","previous","today","back_today","three_days","week","title","subtitle","availability","empty","slot","viewModeChanged","sessionCreated","_sessionsEntries","sessionsEntries","loadCalendar","setViewMode","splitRangeToNextTime","slotTimeRange","slotDuration","mmtTime","getMinutesDifference","minutes","geStartEndFromStartAndSessionDuration","twix","iterate","ngOnChanges","setCalendar","Set","Map","calendarStart","startOf","calendarEnd","endOf","loadEvents","setDateRange","loadAvailabilities","daysRange","hasNext","availableDay","push","set","onSwithedView","onSessionAdded","onSessionRemoved","delete","realDuration","onlineSessionStart","onlineSessionEnd","forEach","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","isBefore","minMmtStartTime","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","timeEarlierRange","isSameOrAfter","mmtEarlyEnd","mmtPauseEnd","timePauseRange","timeEarlyRange","Array","isArray","__spread","isSameOrBefore","mmtEventStart","buildinBusySlot","buildingEarliestSlot","markForCheck","mmtEventEnd","isValid","console","error","eventsTimeRange","_a","indexOf","dayBusyNumber","earliestTimeRange","ChangeDetectorRef","NgxCalendarModule","NgModule","imports","CommonModule","FlexLayoutModule","MatIconModule","declarations","exports"],"mappings":"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","sourcesContent":["export interface Event {\n  key?: string;\n  start: Date;\n  end: Date;\n  details: any;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: {\n    uid: string;\n    email: string;\n    displayName: string;\n  };\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: {\n    uid: string;\n    displayName: string;\n    email: string;\n  };\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: string;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): string[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.details.info) {\n        return session.details.info;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time) && !this.isSlotInSession(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.detail.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n    } else if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session};\n      this.removeSession(source);\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.detail.pause,\n      details: {\n        duration: this.onlineSession.detail.duration,\n        nb_persons: 1,\n        event_type: EventType.session,\n        info: this.bodyConfiguration.calendar.session.info,\n      },\n      user: {\n        uid: this.user.uid,\n        displayName: this.user.displayName,\n        email: this.user.email,\n      }\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessions && this.sessions.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsEndSlots && this.sessionsEndSlots.has(datetime);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: string;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: string) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: string) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: {\n    uid: string;\n    displayName: string;\n    email: string;\n  };\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    key: null,\n    detail: {\n      name: '',\n      max_persons: 1,\n      booking_delay: 1,\n      duration: 15,\n      pause: 0,\n    },\n    prices: [10, 20],\n    date_range: {\n      start: '2019-01-01',\n      end: '2030-12-31',\n    },\n    time_range: {\n      start: '08:00',\n      end: '19:00',\n    }\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n    }\n    this.loadCalendar();\n  }\n\n  // Default View Mode of Week Component\n  _viewMode = 'week';\n\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  static geStartEndFromStartAndSessionDuration(start: Moment, end: Moment, duration: number): {start: Moment, end: Moment} {\n    const eventsTimeRange: TwixIter = start.twix(end).iterate(duration, 'minutes');\n\n    return {\n      start,\n      end\n    };\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.sessions = new Map();\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay);\n    this.end = moment(this.start).add(6, 'days');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.loadEvents(this.start, this.end);\n    this.setDateRange(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    this.daysAvailability = new Map();\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    this.days = [];\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: string) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.detail.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.date_range.start, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.date_range.end, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.time_range.start, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.detail.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.time_range.end, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.detail.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.details.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.details.duration) + session.details.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.details.duration, 'minutes');\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.details.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.details.duration, 'minutes');\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n        this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.details.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.details.duration) + session.details.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.details.duration, 'minutes');\n    while (timeEarlyRange.hasNext()) {\n      const time: Twix = timeEarlyRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.details.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.details.duration, 'minutes');\n      while (timePauseRange.hasNext()) {\n        const time: Twix = timePauseRange.next();\n        const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n        if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries = [\n        ...this._sessionsEntries.filter((session: Session) => {\n          if (moment(session.start).isSameOrAfter(start) &&\n            moment(session.end).isSameOrBefore(end)) {\n            let mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n            mmtEventStart = this.buildinBusySlot(mmtEventStart, session);\n            this.buildingEarliestSlot(mmtEventStart);\n\n            return true;\n          }\n\n          return false;\n        })\n      ];\n    }\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(mmtEventStart: Moment, session: Session): Moment {\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isBefore(mmtEventEnd)) {\n      console.error('invalid dates');\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.details.duration, 'minutes');\n\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.details.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n\n        if ((!session.user ||\n          (session.user &&\n            session.user.uid !== this.user.uid))) {\n          let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n            this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n          dayBusyNumber++;\n          this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n          this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n        }\n        if (session.user && session.user.uid === this.user.uid) {\n          this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n          if (!eventsTimeRange.hasNext()) {\n            this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          }\n        }\n      }\n    }\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(mmtEventStart: Moment) {\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.detail.duration) + this.onlineSession.detail.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.detail.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.detail.duration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatIconModule,\n} from '@angular/material';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n"]}