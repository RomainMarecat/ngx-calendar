{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/shared/util/alert.service.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/shared/firebase/visitor.service.ts","ng://@romainmarecat/ngx-calendar/lib/shared/event/event.service.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.service.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/shared/util/routing-state.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.ts"],"names":["Event","absence","session","AlertService","prototype","message","parameters","this","toast","show","_this","openAlertMessage","translateService","get","subscribe","translation","err","snackBar","open","data","panelClass","duration","Injectable","args","providedIn","MatSnackBar","TranslateService","moment","moment_","CalendarBodyComponent","ngOnInit","onNextDay","daysNb","viewMode","start","add","startChanged","emit","isAllSlotNotAvailable","days","length","filter","day","daysAvailability","key","getAvailabilities","getSessionTitle","time","datetime","value","format","sessions","has","end","getSessionTooltip","details","info","translate","instant","onTimeSlotClicked","isSlotBusy","isSlotEarly","alertService","isSlotSessionStart","isSlotInSession","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","session_type","addSession","toDate","pause","nb_persons","event_type","EventType","sessionAdded","sessionRemoved","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","sessionsSlots","isSlotSessionEnd","sessionsEndSlots","Component","selector","template","Input","Output","EventEmitter","endChanged","CalendarHeaderComponent","Object","defineProperty","_viewMode","switchView","onSwitchedView","switchedView","onStartChanged","goToToday","isToday","previousDay","subtract","nextDay","VisitorService","createQuery","filters","limit","orderBy","query","forEach","where","column","initializeBehaviour","table","query$","BehaviorSubject","filters$","limit$","orderBy$","collectionRef","afs","collection","getDocuments","documents$","pipe","map","documents","document","payload","doc","exists","id","getDocPayload","path","document$","snapshotChanges","action","product","getDocument","of","updateDocument","update","__assign","createDocument","deleteDocument","delete","AngularFirestore","Inject","combineLatest","switchMap","_a","_b","__read","ref","EventService","getEvents","_super","call","getEvent","createEvent","event","updateEvent","deleteEvent","__extends","SessionService","getSessions","getSession","createSession","updateSession","deleteSession","CalendarComponent","splitRangeToNextTime","slotTimeRange","slotDuration","next","mmtTime","getMinutesDifference","minutes","setCalendar","setDateRange","setViewMode","ngOnChanges","name","max_persons","booking_delay","prices","date_range","time_range","Set","Map","calendarStart","startOf","calendarEnd","endOf","loadEvents","dateRange","twix","iterate","hasNext","date","push","title","set","loadAvailabilities","onSwithedView","viewModeChanged","onSessionAdded","sessionCreated","onSessionRemoved","onlineSessionStart","onlineSessionEnd","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","isBefore","minMmtStartTime","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","trueDuration","timeEarlierRange","isSameOrAfter","mmtEarlyEnd","mmtPauseEnd","timePauseRange","timeEarlyRange","sessionService","operator","events","__spread","mmtEventStart","buildinBusySlot","buildingEarliestSlot","cd","markForCheck","mmtEventEnd","isValid","console","error","eventsTimeRange","indexOf","dayBusyNumber","earliestTimeRange","ChangeDetectorRef","Renderer2","ViewChildren","eventService","rd","RoutingState","loadRouting","router","NavigationEnd","urlAfterRedirects","history","__spread$1","getHistory","getPreviousUrl","Router","TABLE_EVENT","InjectionToken","TABLE_SESSION","NgxCalendarModule","NgModule","imports","CommonModule","FlexLayoutModule","MatTooltipModule","MatButtonModule","MatCardModule","MatTableModule","MatIconModule","TranslateModule","forChild","declarations","exports","providers","provide","useValue","useClass","deps","Session"],"mappings":"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","sourcesContent":["export class Event {\n  key?: string;\n  start: Date;\n  end: Date;\n  details: any;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertService {\n  constructor(public snackBar: MatSnackBar,\n              private translateService: TranslateService) {\n  }\n\n  message(message: string, parameters: Object = {}) {\n    this.toast(message, parameters);\n  }\n\n  show(message: string, parameters: Object = {}) {\n    this.toast(message, parameters);\n  }\n\n  toast(message: string, parameters: Object = {}) {\n    if (typeof message === 'string') {\n      // Subscribe on message translation\n      this.translateService.get(message, parameters)\n        .subscribe((translation: string) => {\n          this.openAlertMessage(translation, parameters);\n        }, (err) => {\n          this.openAlertMessage(message, parameters);\n        });\n      return;\n    }\n    this.openAlertMessage(message, parameters);\n  }\n\n  openAlertMessage(message: string, parameters: Object) {\n    // Open Alert Component with a message\n    const toastRef = this.snackBar.open(message, 'message', {\n      data: message,\n      // Add extra class to define custom css or background color\n      panelClass: ['snackbar'],\n      // Timeout duration in ms\n      duration: 8000\n    });\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\nimport { Moment } from 'moment';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\nimport { AlertService } from '../../shared/util/alert.service';\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent implements OnInit {\n  @Input() onlineSession: OnlineSession;\n  @Input() viewMode: String;\n  @Input() start: Moment;\n  @Input() end: Moment;\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessions: Map<string, Session>;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n\n  constructor(private translate: TranslateService,\n              private alertService: AlertService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): String[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.details.info) {\n        return this.translate.instant(session.details.info);\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.alertService.show('error.slot.locked');\n      return;\n    }\n\n    if (!this.isSlotSessionStart(day, time) && !this.isSlotInSession(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.session_type.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n    } else if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session: session};\n      this.removeSession(source);\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n    const session: Session = {\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.session_type.pause,\n      details: {\n        nb_persons: 1,\n        event_type: EventType.session,\n        info: 'calendar.session.info',\n      }\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isSlotSessionStart(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessions && this.sessions.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsEndSlots && this.sessionsEndSlots.has(datetime);\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent implements OnInit {\n  private _viewMode: String;\n  @Input() start: Moment;\n  @Input() end: Moment;\n  @Output() switchedView: EventEmitter<String> = new EventEmitter<String>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n\n  ngOnInit() {\n  }\n\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: String) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: String) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n  CollectionReference,\n  OrderByDirection,\n  Query,\n  WhereFilterOp\n} from '@firebase/firestore-types';\nimport {\n  Action,\n  AngularFirestore,\n  AngularFirestoreCollection,\n  DocumentChangeAction,\n  DocumentReference,\n  DocumentSnapshot\n} from '@angular/fire/firestore';\nimport { map, switchMap } from 'rxjs/operators';\n\nexport interface Document {\n  key?: string;\n  id?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VisitorService {\n  collectionRef: AngularFirestoreCollection<DocumentReference>;\n  documents$: Observable<DocumentChangeAction<any>[]>;\n  document$: Observable<Document>;\n  query$: BehaviorSubject<any | null>;\n  filters$: BehaviorSubject<any[] | null>;\n  limit$: BehaviorSubject<number | null>;\n  startAt$: BehaviorSubject<string | null>;\n  startAfter$: BehaviorSubject<string | null>;\n  orderBy$: BehaviorSubject<any | null>;\n  endAt$: BehaviorSubject<string | null>;\n  endBefore$: BehaviorSubject<string | null>;\n  query: CollectionReference | Query;\n  table: string;\n\n  constructor(public afs: AngularFirestore, @Inject('TABLE_NAME') table: string) {\n    this.initializeBehaviour(table);\n    this.documents$ = combineLatest(\n      this.filters$,\n      this.limit$,\n      this.orderBy$,\n      this.query$\n    ).pipe(\n      switchMap(([filters, limit, orderBy, query]) => {\n        return this.afs.collection(this.table, (ref) => {\n          this.query = ref as CollectionReference;\n          this.createQuery(filters, limit, orderBy, query);\n          return this.query;\n        })\n          .snapshotChanges();\n      })\n    );\n  }\n\n  createQuery(filters, limit, orderBy, query) {\n    if (query && this.query) {\n      if (query.limit) {\n        this.query = this.query.limit(query.limit);\n      }\n      if (query.filters) {\n        query.filters.forEach((filter) => {\n          this.query = this.query.where(filter.column, filter.operator as WhereFilterOp, filter.value);\n        });\n      }\n      if (query.orderBy) {\n        this.query = this.query.orderBy(query.orderBy.column, query.orderBy.direction as OrderByDirection);\n      }\n    }\n\n    if (limit) {\n      this.query = this.query.limit(limit);\n    }\n    if (filters && this.query) {\n      filters.forEach((filter) => {\n        this.query = this.query.where(filter.column, filter.operator as WhereFilterOp, filter.value);\n      });\n    }\n    if (orderBy) {\n      this.query = this.query.orderBy(orderBy.column, orderBy.direction as OrderByDirection);\n    }\n  }\n\n  initializeBehaviour(table: string) {\n    this.table = table;\n    this.query$ = new BehaviorSubject(null);\n    this.filters$ = new BehaviorSubject(null);\n    this.limit$ = new BehaviorSubject(null);\n    this.orderBy$ = new BehaviorSubject(null);\n    this.collectionRef = this.afs.collection(this.table);\n  }\n\n  /**\n   * get multiple documents\n   * @return Observable\n   */\n  getDocuments(): Observable<any[]> {\n    return this.documents$.pipe(\n      map((documents) => {\n        return documents.map((document: DocumentChangeAction<any>) => {\n          if (document.payload.doc.exists) {\n            const doc = document.payload.doc.data() as Document;\n            doc.key = document.payload.doc.id;\n            return doc;\n          }\n        });\n      }));\n  }\n\n  /**\n   * get snapshot change with state, from action\n   */\n  private getDocPayload(path: string): Observable<any> {\n    return this.document$ = this.collectionRef\n      .doc(path)\n      .snapshotChanges()\n      .pipe(\n        map((action: Action<DocumentSnapshot<DocumentReference>>) => {\n          if (action.payload.exists) {\n            const product = action.payload.data() as Document;\n            product.key = action.payload.id;\n            return product;\n          }\n          return null;\n        }));\n  }\n\n  /**\n   * get a single document\n   */\n  getDocument(key: null | string): Observable<Document> {\n    if (key) {\n      return this.getDocPayload(key);\n    }\n    return of(null);\n  }\n\n  /**\n   * Update a document\n   */\n  updateDocument(document: Document): Promise<void> {\n    return this.collectionRef.doc(document.key).update({...document});\n  }\n\n  /**\n   * create a Document\n   */\n  createDocument(document: any): Promise<DocumentReference> {\n    return this.collectionRef.add(document);\n  }\n\n  /**\n   * Delete a document\n   */\n  deleteDocument(document: Document): Promise<void> {\n    return this.collectionRef.doc(document.key).delete();\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { VisitorService } from '../firebase/visitor.service';\nimport { Event } from './event';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService extends VisitorService {\n\n  constructor(afs: AngularFirestore, @Inject('TABLE_EVENT') table: string) {\n    super(afs, table);\n  }\n\n  getEvents(): Observable<Event[]> {\n    return super.getDocuments() as Observable<Event[]>;\n  }\n\n  getEvent(key: string): Observable<Event> {\n    return super.getDocument(key) as Observable<Event>;\n  }\n\n  createEvent(event: Event): Promise<any> {\n    return super.createDocument(event);\n  }\n\n  updateEvent(event: Event) {\n    return super.updateDocument(event);\n  }\n\n  deleteEvent(event: Event) {\n    return super.deleteDocument(event);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { VisitorService } from '../firebase/visitor.service';\nimport { Session } from './session';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService extends VisitorService {\n\n  constructor(afs: AngularFirestore, @Inject('TABLE_SESSION') table: string) {\n    super(afs, table);\n  }\n\n  getSessions(): Observable<Session[]> {\n    return super.getDocuments() as Observable<Session[]>;\n  }\n\n  getSession(key: string): Observable<Session> {\n    return super.getDocument(key) as Observable<Session>;\n  }\n\n  createSession(session: Session): Promise<any> {\n    return super.createDocument(session);\n  }\n\n  updateSession(session: Session) {\n    return super.updateDocument(session);\n  }\n\n  deleteSession(session: Session) {\n    return super.deleteDocument(session);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChildren\n} from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { Day } from '../shared/day/day';\nimport { EventService } from '../shared/event/event.service';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { Event } from '../shared/event/event';\nimport { SessionService } from '../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnInit, OnChanges {\n  // Default View Mode of Week Component\n  _viewMode: String = 'week';\n\n  @Input() onlineSession: OnlineSession;\n  @Input() start: Moment = moment();\n  @Input() end: Moment = moment();\n  @Input() slotDuration = 15;\n\n  calendarStart: Moment;\n  calendarEnd: Moment;\n  @Output() viewModeChanged: EventEmitter<String> = new EventEmitter<String>();\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n\n  @ViewChildren('dayList') el: ElementRef;\n  days: Array<Day> = [];\n\n  trueDuration: number;\n  daysAvailability: Map<string, string[]>;\n  daysBusySlotNumber: Map<string, number>;\n\n  daysAvailabilitySlotNumber: Map<string, number>;\n  events: Event[];\n  busySlots: Set<string>;\n  earlySlots: Set<string>;\n  pauseSlots: Set<string>;\n  sessionsSlots: Set<string>;\n  sessionsEndSlots: Set<string>;\n  sessions: Map<string, Session>;\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time: time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  constructor(private eventService: EventService,\n              private sessionService: SessionService,\n              private cd: ChangeDetectorRef,\n              private rd: Renderer2) {\n  }\n\n  ngOnInit() {\n    this.setCalendar();\n    this.setDateRange();\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.setDateRange();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.onlineSession = {\n      key: 'test1',\n      session_type: {\n        name: 'test1',\n        max_persons: 1,\n        booking_delay: 1,\n        duration: 60,\n        pause: 0,\n      },\n      prices: [10, 20],\n      date_range: {\n        start: '2018-01-01',\n        end: '2019-12-31',\n      },\n      time_range: {\n        start: '08:00',\n        end: '19:00',\n      }\n    };\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.sessions = new Map();\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === '3days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay);\n    this.end = moment(this.start).add(6, 'days');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  setDateRange() {\n    this.setCalendar();\n    this.setViewMode();\n    // this.buildTrueDuration();\n    this.loadEvents(this.start, this.end);\n    this.daysAvailability = new Map();\n    const dateRange: TwixIter = this.start\n      .twix(this.end)\n      .iterate(1, 'days');\n    this.days = [];\n    // Loading all days\n    while (dateRange.hasNext()) {\n      const date: Twix = dateRange.next();\n      this.days.push({\n        title: date.format('DD/MM/YYYY'),\n        key: date.format('YYYY-MM-DD'),\n        value: moment(date.toDate())\n      });\n      this.daysAvailability.set(date.format('YYYY-MM-DD'), []);\n    }\n    this.loadAvailabilities();\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: String) {\n    this.viewModeChanged.emit(viewMode);\n    this.setDateRange();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.setDateRange();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    const duration = this.onlineSession.session_type.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.date_range.start, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.date_range.end, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.time_range.start, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.session_type.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.time_range.end, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(duration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime).iterate(this.slotDuration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(this.slotDuration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.trueDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() - (mmtEarlyStart.minutes() % this.slotDuration) + this.slotDuration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(this.slotDuration, 'minutes');\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % this.slotDuration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(this.onlineSession.session_type.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(this.slotDuration, 'minutes');\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n      if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n        this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(this.slotDuration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.trueDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() - (mmtEarlyStart.minutes() % this.slotDuration) + this.slotDuration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(this.slotDuration, 'minutes');\n    while (timeEarlyRange.hasNext()) {\n      const time: Twix = timeEarlyRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % this.slotDuration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(this.slotDuration, 'minutes');\n      while (timePauseRange.hasNext()) {\n        const time: Twix = timePauseRange.next();\n        const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n        if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   *************************************************/\n\n  loadEvents(start: Moment, end: Moment) {\n    this.sessionService.filters$.next([\n      {\n        column: 'start',\n        operator: '>=',\n        value: moment(start).toDate()\n      }\n    ]);\n    this.sessionService.getSessions()\n      .subscribe((events: Session[]) => {\n        this.events = [...events.filter((event) => event && event.end <= end.toDate())];\n        this.busySlots = new Set();\n        this.daysBusySlotNumber = new Map();\n\n        this.events.forEach((event: Event) => {\n          let mmtEventStart = moment(event.start, 'YYYY-MM-DDHH:mm');\n          mmtEventStart = this.buildinBusySlot(mmtEventStart, event);\n          this.buildingEarliestSlot(mmtEventStart);\n        });\n\n        this.cd.markForCheck();\n      });\n  }\n\n  buildinBusySlot(mmtEventStart: Moment, event: Event): Moment {\n    const mmtEventEnd = moment(event.end, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isBefore(mmtEventEnd)) {\n      console.error('invalid dates');\n      return null;\n    }\n    /* building busy slots by events*/\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(this.slotDuration, 'minutes');\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, this.slotDuration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n\n    return mmtEventStart;\n  }\n\n  buildingEarliestSlot(mmtEventStart: Moment) {\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.trueDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.slotDuration) + this.slotDuration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.slotDuration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.slotDuration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n}\n","import { NavigationEnd, Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoutingState {\n  private history = [];\n\n  constructor(private router: Router) {\n  }\n\n  public loadRouting(): void {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(({urlAfterRedirects}: NavigationEnd) => {\n        this.history = [...this.history, urlAfterRedirects];\n      });\n  }\n\n  public getHistory(): string[] {\n    return this.history;\n  }\n\n  public getPreviousUrl(): string {\n    return this.history[this.history.length - 2] || '/';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { InjectionToken, NgModule } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatIconModule,\n  MatTableModule,\n  MatTooltipModule\n} from '@angular/material';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { EventService } from './shared/event/event.service';\nimport { SessionService } from './shared/session/session.service';\nimport { AlertService } from './shared/util/alert.service';\nimport { RoutingState } from './shared/util/routing-state';\n\nexport const TABLE_EVENT = new InjectionToken<string>('event');\nexport const TABLE_SESSION = new InjectionToken<string>('session');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatCardModule,\n    MatTableModule,\n    MatIconModule,\n    TranslateModule.forChild()\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  providers: [\n    AlertService,\n    RoutingState,\n    {provide: TABLE_SESSION, useValue: 'session'},\n    {provide: TABLE_EVENT, useValue: 'event'},\n    {provide: EventService, useClass: EventService, deps: [AngularFirestore, TABLE_EVENT]},\n    {provide: SessionService, useClass: SessionService, deps: [AngularFirestore, TABLE_SESSION]},\n  ]\n})\nexport class NgxCalendarModule {\n}\n","import { EventType, Event } from '../../shared/event/event';\n\nexport class Session extends Event {\n  details: {\n    event_type: EventType,\n    nb_persons: number,\n    booking?: any;\n    info: string;\n    // age?: Parameter;\n    // level?: Parameter;\n    // sport: Sport;\n    // speciality?: Sport;\n    // city: City;\n    // meeting_point?: MeetingPoint;\n    customers?: string[];\n  };\n}\n"]}