{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.service.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts"],"names":["EventType","SessionService","this","sessionsEntries$","BehaviorSubject","sessions","Map","factory","ɵfac","providedIn","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","i0.ɵɵproperty","i0.ɵɵlistener","i0.ɵɵtextInterpolate1","i0.ɵɵclassProp","ctx_r47","isSlotEarly","day_r45","time_r49","isSlotInSession","isSlotSessionStart","isSlotSessionEnd","_r51","i0.ɵɵattribute","moment","moment_","CalendarBodyComponent","sessionService","sessionAdded","EventEmitter","sessionRemoved","startChanged","endChanged","slotLocked","prototype","ngOnInit","_this","subscribe","onNextDay","daysNb","viewMode","start","add","emit","isAllSlotNotAvailable","days","length","filter","day","daysAvailability","get","key","getAvailabilities","getSessionTitle","time","datetime","value","format","has","session","end","getSessionTooltip","comment","onTimeSlotClicked","isSlotBusy","isDateTimeInSessionsFromCurrentUser","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","duration","addSession","Date","toJSON","id","toDate","pause","nb_persons","event_type","bodyConfiguration","calendar","info","user","customers","customer","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","sessionsSlots","sessionsStartSlots","sessionsEndSlots","core","selectors","inputs","outputs","decls","vars","consts","template","rf","ctx","ctx_r68","isToday","CalendarHeaderComponent","switchedView","Object","defineProperty","_viewMode","switchView","onSwitchedView","onStartChanged","goToToday","previousDay","subtract","nextDay","headerConfiguration","$event","_r79","onSessionAdded","onSessionRemoved","ctx_r77","CalendarComponent","cd","name","max_persons","booking_delay","price","start_date","end_date","start_time","end_time","calendarConfiguration","cta","next","previous","today","back_today","three_days","week","title","subtitle","availability","empty","slot","viewModeChanged","sessionCreated","_sessionsEntries","sessionsEntries","loadCalendar","setViewMode","splitRangeToNextTime","slotTimeRange","slotDuration","mmtTime","getMinutesDifference","minutes","ngOnChanges","setCalendar","Set","calendarStart","startOf","calendarEnd","endOf","setDateRange","loadEvents","loadAvailabilities","daysRange","twix","iterate","hasNext","availableDay","push","set","onSwithedView","delete","realDuration","onlineSessionStart","onlineSessionEnd","forEach","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","isBefore","minMmtStartTime","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","timeEarlierRange","handleEarlySlot","mmtEarlyEnd","mmtPauseEnd","timePauseRange","handlePauseSlot","timeEarlyRange","Array","isArray","isSameOrAfter","isSameOrBefore","buildinBusySlot","buildingEarliestSlot","mmtEventStart","mmtEventEnd","isValid","console","error","eventsTimeRange","_a","includes","map","c","addDayBusySlot","setSessionSlot","earliestTimeRange","dayBusyNumber","action","ChangeDetectorRef","features","NgxCalendarModule","imports","CommonModule","FlexLayoutModule","MatIconModule","declarations","exports"],"mappings":"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","sourcesContent":["export interface Event {\n  id: string;\n  start: Date;\n  end: Date;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: any;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Session } from './session';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  sessionsEntries$: BehaviorSubject<Session[]> = new BehaviorSubject<Session[]>([]);\n\n  sessions: BehaviorSubject<Map<string, Session>> = new BehaviorSubject<Map<string, Session>>(new Map<string, Session>());\n\n  constructor() {\n  }\n}\n","<div class=\"calendar-body-wrapper\">\n  <table class=\"calendar-body-table-wrapper table table-bordered\">\n    <thead class=\"calendar-body-table-head\">\n    <tr class=\"calendar-body-head-day-row\"\n        *ngIf=\"viewMode !== 'day'\">\n      <th class=\"calendar-body-day-header text-center\"\n          *ngFor=\"let day of days\">\n        <span class=\"truncate\">{{ day.title }}</span>\n      </th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class=\"calendar-body-row\">\n      <td class=\"calendar-body-column-content text-center\"\n          [attr.id]=\"day.key\"\n          *ngFor=\"let day of days; let keyDay = index\">\n        <div class=\"time-slot\"\n             [class.busy]=\"isSlotBusy(day, time)\"\n             [class.early]=\"isSlotEarly(day, time)\"\n             [class.session]=\"isSlotInSession(day, time)\"\n             [class.session-start]=\"isSlotSessionStart(day, time)\"\n             [class.session-end]=\"isSlotSessionEnd(day, time)\"\n             *ngFor=\"let time of getAvailabilities(day.key)\">\n          <div class=\"time-content\">\n            <button type=\"button\"\n                    class=\"slot-available\"\n                    (click)=\"onTimeSlotClicked(day, time)\"\n                    *ngIf=\"!isDateTimeInSessionsFromCurrentUser(day, time); else sessionTitle\">\n              <span class=\"default-time\">{{ time }}</span>\n            </button>\n            <ng-template #sessionTitle>\n              <button type=\"button\"\n                      class=\"slot-session\">\n                {{ getSessionTitle(day, time)}}\n              </button>\n            </ng-template>\n            <a class=\"link-close\" (click)=\"onTimeSlotClicked(day, time)\">\n              <mat-icon class=\"icon-close\"\n                        *ngIf=\"isDateTimeInSessionsFromCurrentUser(day, time)\">\n                close\n              </mat-icon>\n            </a>\n          </div>\n          <div class=\"slot-busy\"\n               *ngIf=\"getAvailabilities(day.key).length <= 0 || isDayBusy(day, time)\">\n            <span>{{bodyConfiguration.calendar.availability.empty}}</span>\n          </div>\n        </div>\n        <div class=\"next-slot\"\n             *ngIf=\"isAllSlotNotAvailable() && keyDay === days.length-1\">\n          <button type=\"button\"\n                  role=\"button\"\n                  [title]=\"bodyConfiguration.calendar.availability.slot\"\n                  (click)=\"onNextDay()\">\n            <span>{{ bodyConfiguration.calendar.availability.slot }}</span>\n            <mat-icon>keyboard_arrow_right</mat-icon>\n          </button>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\nimport { SessionService } from '../../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent implements OnInit {\n  /**\n   * User could be passed to show session owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: string;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessionsStartSlots: Set<string>;\n  sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private sessionService: SessionService) {\n  }\n\n  ngOnInit() {\n    this.sessionService.sessions\n      .subscribe((sessions) => {\n        this.sessions = sessions;\n      });\n  }\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): string[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.comment) {\n        return session.comment;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n      return;\n    }\n\n    if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session};\n      this.removeSession(source);\n      return;\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      id: null,\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.pause || 0,\n      duration: this.onlineSession.duration,\n      nb_persons: 1,\n      event_type: EventType.session,\n      comment: this.bodyConfiguration.calendar.session.info,\n      user: this.user,\n      customers: [this.customer]\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupé) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tôt)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return this.sessions &&\n      this.sessions.has(datetime) &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')) &&\n      this.sessionsStartSlots.has(datetime) &&\n      this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm'));\n  }\n\n  isSlotSessionStart(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsStartSlots.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return (this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsEndSlots.has(datetime)) ||\n      (this.sessionsStartSlots.has(datetime) &&\n        session &&\n        this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')));\n  }\n}\n","<div fxLayout=\"row wrap\"\n     fxLayoutAlign=\"start stretch\"\n     fxLayout.xs=\"column\"\n     fxLayoutAlign.xs=\"start center\"\n     fxLayoutGap.xs=\"10px\"\n     *ngIf=\"headerConfiguration\">\n\n  <div class=\"left-actions\"\n       fxLayout=\"row\"\n       fxLayoutAlign=\"start stretch\"\n       fxLayoutGap=\"10px\"\n       fxLayout.xs=\"row\"\n       fxLayoutAlign.xs=\"center stretch\"\n       fxLayoutGap.xs=\"10px\">\n    <button class=\"button-actions\"\n            (click)=\"previousDay()\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.cta.previous\">\n      <mat-icon>keyboard_arrow_left</mat-icon>\n    </button>\n    <button class=\"button-actions\"\n            (click)=\"nextDay()\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.cta.next\">\n      <mat-icon>keyboard_arrow_right</mat-icon>\n    </button>\n    <button class=\"button-actions\"\n            [title]=\"headerConfiguration.calendar.back_today\"\n            [disabled]=\"isToday()\"\n            (click)=\"goToToday()\"\n            role=\"button\">\n      <mat-icon>today</mat-icon>\n    </button>\n  </div>\n  <div class=\"right-actions\"\n       fxLayout=\"row wrap\"\n       fxLayoutAlign=\"end stretch\"\n       fxLayoutGap=\"10px\"\n       fxLayout.xs=\"row wrap\"\n       fxLayoutAlign.xs=\"center stretch\"\n       fxLayoutGap.xs=\"10px\">\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.today\"\n            [disabled]=\"true\"\n            [class.hide-on-small-only]=\"end?.format('YYYY-MM-DD') !== start?.format('YYYY-MM-DD')\">\n      <span>{{ start?.format('LL') }}</span>\n      <span *ngIf=\"end?.format('YYYY-MM-DD') !== start?.format('YYYY-MM-DD')\">\n        - {{ end?.format('LL') }}\n      </span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.week\"\n            [class.active]=\"viewMode === 'week'\"\n            (click)=\"switchView('week')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_week</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.week }}</span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.three_days\"\n            [class.active]=\"viewMode === 'three_days'\"\n            (click)=\"switchView('three_days')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_column</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.three_days }}</span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.day\"\n            [class.active]=\"viewMode === 'day'\"\n            (click)=\"switchView('day')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_day</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.day }}</span>\n    </button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: string;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: string) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: string) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","<div class=\"week-calendar-wrapper\">\n  <div class=\"week-calendar-header\">\n\n\n    <div class=\"week-calendar-title\">\n\n      <lib-calendar-header [start]=\"start\"\n                           [end]=\"end\"\n                           [headerConfiguration]=\"calendarConfiguration\"\n                           [viewMode]=\"viewMode\"\n                           (switchedView)=\"onSwithedView($event)\"\n                           (startChanged)=\"onStartChanged($event)\"></lib-calendar-header>\n\n    </div>\n\n  </div>\n\n  <div>\n\n\n    <lib-calendar-body [bodyConfiguration]=\"calendarConfiguration\"\n                       [onlineSession]=\"onlineSession\"\n                       [days]=\"days\"\n                       [viewMode]=\"viewMode\"\n                       [start]=\"start\"\n                       [end]=\"end\"\n                       [daysAvailability]=\"daysAvailability\"\n                       [daysBusySlotNumber]=\"daysBusySlotNumber\"\n                       [daysAvailabilitySlotNumber]=\"daysAvailabilitySlotNumber\"\n                       [busySlots]=\"busySlots\"\n                       [user]=\"user\"\n                       [customer]=\"customer\"\n                       [earlySlots]=\"earlySlots\"\n                       [pauseSlots]=\"pauseSlots\"\n                       [sessionsSlots]=\"sessionsSlots\"\n                       [sessionsStartSlots]=\"sessionsStartSlots\"\n                       [sessionsEndSlots]=\"sessionsEndSlots\"\n                       (startChanged)=\"onStartChanged($event)\"\n                       (sessionAdded)=\"onSessionAdded($event)\"\n                       (sessionRemoved)=\"onSessionRemoved($event)\"\n                       *ngIf=\"start && end && days && viewMode\"></lib-calendar-body>\n\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { SessionService } from '../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to show the owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    id: null,\n    comment: '',\n    name: '',\n    max_persons: 1,\n    booking_delay: 1,\n    duration: 15,\n    pause: 0,\n    price: 10,\n    start_date: '2019-01-01',\n    end_date: '2030-12-31',\n    start_time: '08:00',\n    end_time: '19:00'\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'précédent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir à la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'réserver votre créneau',\n      subtitle: 'toutes les disponibilités',\n      availability: {\n        empty: 'Aucune disponibilité',\n        slot: 'Prochaine disponibilité',\n      },\n      session: {\n        info: 'Créneau vérrouillé'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsStartSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef,\n              private sessionService: SessionService) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n    }\n    this.loadCalendar();\n  }\n\n  // Default View Mode of Week Component\n  _viewMode = 'week';\n\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.days = [];\n    this.daysAvailability = new Map();\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.sessionsStartSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n    this.sessions = new Map();\n    this.sessionService.sessions.next(this.sessions);\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay).startOf('day');\n    this.end = moment(this.start).add(6, 'days').endOf('day');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.setDateRange(this.start, this.end);\n    this.loadEvents(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: string) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.sessionService.sessions.next(this.sessions);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.sessionService.sessions.next(this.sessions);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.start_date, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.end_date, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.start_time, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.end_time, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlierRange, 'add', session, mmtEarlyStart, mmtStart);\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n    this.handlePauseSlot(timePauseRange, 'add', session, mmtEarlyStart, mmtEarlyEnd);\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlyRange, 'remove', session, mmtEarlyStart, mmtStart);\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n      this.handlePauseSlot(timePauseRange, 'remove', session, mmtEarlyStart, mmtEarlyEnd);\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    if (!this.onlineSession) {\n      return;\n    }\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries.forEach((session: Session) => {\n        if (moment(session.start).isSameOrAfter(start) &&\n          moment(session.end).isSameOrBefore(end)) {\n          this.buildinBusySlot(session);\n          this.buildingEarliestSlot(session);\n        }\n      });\n    }\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(session: Session): Moment {\n    const mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isSameOrBefore(mmtEventEnd)) {\n      console.error('invalid dates', mmtEventStart, mmtEventEnd);\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.duration, 'minutes');\n\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        !this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        if ((!session.customers ||\n          (session.customers &&\n            this.customer &&\n            !session.customers.map(c => c.id).includes(this.customer.id)))) {\n          this.addDayBusySlot(time);\n        }\n        if (session.customers && this.customer && session.customers.map(c => c.id).includes(this.customer.id)) {\n          this.setSessionSlot(eventsTimeRange, time, session);\n        }\n      }\n    }\n    this.sessionService.sessions.next(this.sessions);\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Build in sessions Map only start session with its session\n   */\n  setSessionSlot(eventsTimeRange: TwixIter, time: Twix, session: Session) {\n    this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n    if (!eventsTimeRange.hasNext()) {\n      this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      return;\n    }\n    this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n    this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(session: Session) {\n    const mmtEventStart: Moment = moment(session.start, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !this.realDuration) {\n      return;\n    }\n\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.duration) + this.onlineSession.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.duration);\n      /* IF the busy slot is in availability and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        this.addDayBusySlot(time);\n      }\n    }\n  }\n\n  /**\n   * Add in busy slot new unavailable time reference\n   */\n  addDayBusySlot(time: Twix) {\n    let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n      this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n    dayBusyNumber++;\n    this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n    this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Remove/add from pauseSlot sessions start/end interval\n   */\n  handlePauseSlot(timePauseRange: TwixIter, action: string, session: Session, start: Moment, end: Moment) {\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(start) && mmtTime.isBefore(end)) {\n        if (action === 'remove') {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n        if (action === 'add') {\n          this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove/add from earlySlot all sessions\n   */\n  handleEarlySlot(timeEarlierRange: TwixIter,\n                  action: string,\n                  session: Session,\n                  mmtEarlyStart: Moment,\n                  mmtStart: Moment) {\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        if (action === 'add') {\n          this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n\n        if (action === 'remove') {\n          this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n"]}