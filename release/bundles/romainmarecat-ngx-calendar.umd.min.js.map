{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.ts"],"names":["Event","absence","session","moment","moment_","CalendarBodyComponent","prototype","onNextDay","daysNb","this","viewMode","start","add","startChanged","emit","isAllSlotNotAvailable","_this","days","length","filter","day","daysAvailability","get","key","getAvailabilities","getSessionTitle","time","datetime","value","format","sessions","has","end","getSessionTooltip","details","info","onTimeSlotClicked","isSlotBusy","isSlotEarly","slotLocked","isSlotSessionStart","isSlotInSession","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","session_type","duration","addSession","toDate","pause","nb_persons","event_type","EventType","bodyConfiguration","calendar","sessionAdded","sessionRemoved","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","sessionsSlots","isSlotSessionEnd","sessionsEndSlots","Component","args","selector","template","Input","Output","EventEmitter","endChanged","CalendarHeaderComponent","Object","defineProperty","_viewMode","switchView","onSwitchedView","switchedView","onStartChanged","goToToday","isToday","previousDay","subtract","nextDay","CalendarComponent","splitRangeToNextTime","slotTimeRange","slotDuration","next","mmtTime","getMinutesDifference","minutes","ngOnInit","setCalendar","setDateRange","setViewMode","ngOnChanges","name","max_persons","booking_delay","prices","date_range","time_range","Set","Map","calendarStart","startOf","calendarEnd","endOf","loadEvents","dateRange","twix","iterate","hasNext","date","push","title","set","loadAvailabilities","onSwithedView","viewModeChanged","onSessionAdded","sessionCreated","onSessionRemoved","delete","onlineSessionStart","onlineSessionEnd","forEach","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","isBefore","minMmtStartTime","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","realDuration","timeEarlierRange","isSameOrAfter","mmtEarlyEnd","mmtPauseEnd","timePauseRange","timeEarlyRange","Array","isArray","sessionsEntries","__spread","event","mmtEventStart","buildinBusySlot","buildingEarliestSlot","cd","markForCheck","mmtEventEnd","isValid","console","error","eventsTimeRange","_a","indexOf","dayBusyNumber","earliestTimeRange","ChangeDetectorRef","calendarConfiguration","cta","previous","today","back_today","three_days","week","subtitle","availability","empty","slot","NgxCalendarModule","NgModule","imports","CommonModule","FlexLayoutModule","MatButtonModule","MatIconModule","declarations","exports","Session"],"mappings":"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","sourcesContent":["export class Event {\n  key?: string;\n  start: Date;\n  end: Date;\n  details: any;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent {\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: String;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): String[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.details.info) {\n        return session.details.info;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isSlotSessionStart(day, time) && !this.isSlotInSession(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.session_type.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n    } else if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session: session};\n      this.removeSession(source);\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n    const session: Session = {\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.session_type.pause,\n      details: {\n        nb_persons: 1,\n        event_type: EventType.session,\n        info: this.bodyConfiguration.calendar.session.info,\n      }\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isSlotSessionStart(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessions && this.sessions.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsEndSlots && this.sessionsEndSlots.has(datetime);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<String> = new EventEmitter<String>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: String;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: String) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: String) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { Event } from '../shared/event/event';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnInit, OnChanges {\n  // Default View Mode of Week Component\n  _viewMode: String = 'week';\n\n  @Input() onlineSession: OnlineSession;\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Slot session duration in minutes\n   */\n  @Input() slotDuration = 60;\n\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  @Input() sessionsEntries: Session[] = [];\n\n  @Output() viewModeChanged: EventEmitter<String> = new EventEmitter<String>();\n\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n\n  days: Array<Day> = [];\n  realDuration: number;\n  daysAvailability: Map<string, string[]>;\n\n  daysBusySlotNumber: Map<string, number>;\n  daysAvailabilitySlotNumber: Map<string, number>;\n  busySlots: Set<string>;\n  earlySlots: Set<string>;\n  pauseSlots: Set<string>;\n  sessionsSlots: Set<string>;\n  sessionsEndSlots: Set<string>;\n  sessions: Map<string, Session>;\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time: time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    this.setCalendar();\n    this.setDateRange();\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.setDateRange();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.onlineSession = {\n      key: 'test1',\n      session_type: {\n        name: 'test1',\n        max_persons: 1,\n        booking_delay: 1,\n        duration: 60,\n        pause: 0,\n      },\n      prices: [10, 20],\n      date_range: {\n        start: '2018-01-01',\n        end: '2019-12-31',\n      },\n      time_range: {\n        start: '08:00',\n        end: '19:00',\n      }\n    };\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.sessions = new Map();\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay);\n    this.end = moment(this.start).add(6, 'days');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  setDateRange() {\n    this.setCalendar();\n    this.setViewMode();\n    // this.buildTrueDuration();\n    this.loadEvents(this.start, this.end);\n    this.daysAvailability = new Map();\n    const dateRange: TwixIter = this.start\n      .twix(this.end)\n      .iterate(1, 'days');\n    this.days = [];\n    // Loading all days\n    while (dateRange.hasNext()) {\n      const date: Twix = dateRange.next();\n      this.days.push({\n        title: date.format('DD/MM/YYYY'),\n        key: date.format('YYYY-MM-DD'),\n        value: moment(date.toDate())\n      });\n      this.daysAvailability.set(date.format('YYYY-MM-DD'), []);\n    }\n    this.loadAvailabilities();\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: String) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.setDateRange();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.setDateRange();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    const duration = this.onlineSession.session_type.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.date_range.start, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.date_range.end, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.time_range.start, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.session_type.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.time_range.end, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(duration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime).iterate(this.slotDuration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(this.slotDuration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() - (mmtEarlyStart.minutes() % this.slotDuration) + this.slotDuration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(this.slotDuration, 'minutes');\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % this.slotDuration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(this.onlineSession.session_type.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(this.slotDuration, 'minutes');\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n      if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n        this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(this.slotDuration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() - (mmtEarlyStart.minutes() % this.slotDuration) + this.slotDuration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(this.slotDuration, 'minutes');\n    while (timeEarlyRange.hasNext()) {\n      const time: Twix = timeEarlyRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % this.slotDuration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(this.slotDuration, 'minutes');\n      while (timePauseRange.hasNext()) {\n        const time: Twix = timePauseRange.next();\n        const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), this.slotDuration);\n        if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   *************************************************/\n\n  loadEvents(start: Moment, end: Moment) {\n    if (Array.isArray(this.sessionsEntries)) {\n      this.sessionsEntries = [...this.sessionsEntries.filter((event) => {\n        return event && event.start >= start.toDate() && event.end <= end.toDate();\n      })];\n    }\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n\n    this.sessionsEntries.forEach((event: Event) => {\n      let mmtEventStart = moment(event.start, 'YYYY-MM-DDHH:mm');\n      mmtEventStart = this.buildinBusySlot(mmtEventStart, event);\n      this.buildingEarliestSlot(mmtEventStart);\n    });\n\n    this.cd.markForCheck();\n  }\n\n  buildinBusySlot(mmtEventStart: Moment, event: Event): Moment {\n    const mmtEventEnd = moment(event.end, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isBefore(mmtEventEnd)) {\n      console.error('invalid dates');\n      return null;\n    }\n    /* building busy slots by events*/\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(this.slotDuration, 'minutes');\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, this.slotDuration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n\n    return mmtEventStart;\n  }\n\n  buildingEarliestSlot(mmtEventStart: Moment) {\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.slotDuration) + this.slotDuration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.slotDuration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.slotDuration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { InjectionToken, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatButtonModule,\n  MatIconModule,\n} from '@angular/material';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n","import { EventType, Event } from '../../shared/event/event';\n\nexport class Session extends Event {\n  details: {\n    event_type: EventType,\n    nb_persons: number,\n    booking?: any;\n    info: string;\n    // age?: Parameter;\n    // level?: Parameter;\n    // sport: Sport;\n    // speciality?: Sport;\n    // city: City;\n    // meeting_point?: MeetingPoint;\n    customers?: string[];\n  };\n}\n"]}