{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.service.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts"],"names":["EventType","absence","session","SessionService","this","sessionsEntries$","BehaviorSubject","sessions","Map","Injectable","args","providedIn","moment","moment_","CalendarBodyComponent","sessionService","sessionAdded","EventEmitter","sessionRemoved","startChanged","endChanged","slotLocked","prototype","ngOnInit","_this","subscribe","onNextDay","daysNb","viewMode","start","add","emit","isAllSlotNotAvailable","days","length","filter","day","daysAvailability","get","key","getAvailabilities","getSessionTitle","time","datetime","value","format","has","end","getSessionTooltip","comment","onTimeSlotClicked","isSlotBusy","isSlotEarly","isDateTimeInSessionsFromCurrentUser","isSlotInSession","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","duration","addSession","Date","toJSON","id","toDate","pause","nb_persons","event_type","bodyConfiguration","calendar","info","user","customers","customer","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","sessionsSlots","isSlotSessionEnd","sessionsEndSlots","Component","selector","template","Input","Output","CalendarHeaderComponent","switchedView","Object","defineProperty","_viewMode","switchView","onSwitchedView","onStartChanged","goToToday","isToday","previousDay","subtract","nextDay","CalendarComponent","cd","name","max_persons","booking_delay","price","start_date","end_date","start_time","end_time","calendarConfiguration","cta","next","previous","today","back_today","three_days","week","title","subtitle","availability","empty","slot","viewModeChanged","sessionCreated","_sessionsEntries","sessionsEntries","loadCalendar","setViewMode","splitRangeToNextTime","slotTimeRange","slotDuration","mmtTime","getMinutesDifference","minutes","geStartEndFromStartAndSessionDuration","twix","iterate","ngOnChanges","setCalendar","Set","calendarStart","startOf","calendarEnd","endOf","setDateRange","loadEvents","loadAvailabilities","daysRange","hasNext","availableDay","push","set","onSwithedView","onSessionAdded","onSessionRemoved","delete","realDuration","onlineSessionStart","onlineSessionEnd","forEach","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","isBefore","minMmtStartTime","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","timeEarlierRange","isSameOrAfter","mmtEarlyEnd","mmtPauseEnd","timePauseRange","timeEarlyRange","Array","isArray","isSameOrBefore","mmtEventStart","buildinBusySlot","buildingEarliestSlot","mmtEventEnd","isValid","console","error","eventsTimeRange","_a","includes","map","c","dayBusyNumber","setSessionSlot","earliestTimeRange","indexOf","ChangeDetectorRef","NgxCalendarModule","NgModule","imports","CommonModule","FlexLayoutModule","MatIconModule","declarations","exports"],"mappings":"0nBAWA,IAAYA,EAAS,CACnBC,QAAO,EACPC,QAAO,iDCbT,IAAAC,EAAA,WAaE,SAAAA,IAJAC,KAAAC,iBAA+C,IAAIC,EAAAA,gBAA2B,IAE9EF,KAAAG,SAAkD,IAAID,EAAAA,gBAAsC,IAAIE,gCAPjGC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJALd,OCUMC,EAASC,EAEfC,EAAA,WAwDE,SAAAA,EAAoBC,GAAAX,KAAAW,eAAAA,EAPVX,KAAAY,aAAsC,IAAIC,EAAAA,aAC1Cb,KAAAc,eACN,IAAID,EAAAA,aACEb,KAAAe,aAAqC,IAAIF,EAAAA,aACzCb,KAAAgB,WAAmC,IAAIH,EAAAA,aACvCb,KAAAiB,WAAoC,IAAIJ,EAAAA,aA8JpD,OAzJEH,EAAAQ,UAAAC,SAAA,WAAA,IAAAC,EAAApB,KACEA,KAAKW,eAAeR,SACjBkB,WAAS,SAAElB,GACViB,EAAKjB,SAAWA,MAOtBO,EAAAQ,UAAAI,UAAA,eACMC,EAAS,EACS,SAAlBvB,KAAKwB,WACPD,EAAS,GAEXvB,KAAKyB,MAAQjB,EAAOR,KAAKyB,OAAOC,IAAIH,EAAQ,OAC5CvB,KAAKe,aAAaY,KAAK3B,KAAKyB,QAM9Bf,EAAAQ,UAAAU,sBAAA,WAAA,IAAAR,EAAApB,KACE,GAAIA,KAAK6B,MAAQ7B,KAAK6B,KAAKC,OAAS,EAClC,OAA2F,IAApF9B,KAAK6B,KAAKE,QAAM,SAAEC,GAAQ,OAAAZ,EAAKa,iBAAiBC,IAAIF,EAAIG,KAAKL,OAAS,KAAGA,QAOpFpB,EAAAQ,UAAAkB,kBAAA,SAAkBJ,GAChB,OAAOhC,KAAKiC,iBAAiBC,IAAIF,IAGnCtB,EAAAQ,UAAAmB,gBAAA,SAAgBL,EAAUM,OAClBC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,GAAItC,KAAKG,UAAYH,KAAKG,SAASuC,IAAIH,GAAW,KAC1CzC,EAAmBE,KAAKG,SAAS+B,IAAIK,GAC3C,OAAO/B,EAAOV,EAAQ2B,OAAOgB,OAAO,SAAW,MAAQjC,EAAOV,EAAQ6C,KAAKF,OAAO,SAEpF,MAAO,IAGT/B,EAAAQ,UAAA0B,kBAAA,SAAkBZ,EAAUM,OACpBC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAC1D,GAAItC,KAAKG,UAAYH,KAAKG,SAASuC,IAAIH,GAAW,KAC1CzC,EAAUE,KAAKG,SAAS+B,IAAIK,GAClC,GAAIzC,EAAQ+C,QACV,OAAO/C,EAAQ+C,QAInB,MAAO,IAGTnC,EAAAQ,UAAA4B,kBAAA,SAAkBd,EAAUM,OACpBC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,GAAItC,KAAK+C,WAAWf,EAAKM,IAAStC,KAAKgD,YAAYhB,EAAKM,GACtDtC,KAAKiB,WAAWU,MAAK,QAIvB,GAAK3B,KAAKiD,oCAAoCjB,EAAKM,IAAUtC,KAAKkD,gBAAgBlB,EAAKM,IAIhF,GAAItC,KAAKG,SAASuC,IAAIH,GAAW,KAEhCY,EAAS,CAAChB,IAAKI,EAAUzC,QADfE,KAAKG,SAAS+B,IAAIK,IAElCvC,KAAKoD,cAAcD,QAPyE,KACtFE,EAAW7C,EAAO+B,EAAU,mBAC5Be,EAASD,EAASE,QAAQ7B,IAAI1B,KAAKwD,cAAcC,SAAU,WACjEzD,KAAK0D,WAAWL,EAAUC,KAQ9B5C,EAAAQ,UAAAwC,WAAA,SAAWjC,EAAekB,GAGxBgB,KAAKzC,UAAU0C,OAAM,WACnB,OAAOpD,EAAOR,MAAMyC,cAIhB3C,EAAmB,CACvB+D,GAAI,KACJpC,MAAOA,EAAMqC,SACbnB,IAAKA,EAAImB,SACTC,MAAO/D,KAAKwD,cAAcO,OAAS,EACnCN,SAAUzD,KAAKwD,cAAcC,SAC7BO,WAAY,EACZC,WAAYrE,EAAUE,QACtB+C,QAAS7C,KAAKkE,kBAAkBC,SAASrE,QAAQsE,KACjDC,KAAMrE,KAAKqE,KACXC,UAAW,CAACtE,KAAKuE,WAEnBvE,KAAKY,aAAae,KAAK7B,IAGzBY,EAAAQ,UAAAkC,cAAA,SAAcD,GACZnD,KAAKc,eAAea,KAAKwB,IAM3BzC,EAAAQ,UAAAsD,UAAA,SAAUxC,EAAUM,OACZC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,OAAOtC,KAAKyE,oBAAsBzE,KAAK0E,4BAClC1E,KAAKyE,mBAAmB/B,IAAIH,IAAavC,KAAK0E,2BAA2BhC,IAAIH,IAC7EvC,KAAKyE,mBAAmBvC,IAAIK,IAAavC,KAAK0E,2BAA2BxC,IAAIK,IAMpF7B,EAAAQ,UAAA6B,WAAA,SAAWf,EAAUM,OACbC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,OAAOtC,KAAK2E,WAAa3E,KAAK2E,UAAUjC,IAAIH,IAM9C7B,EAAAQ,UAAA8B,YAAA,SAAYhB,EAAUM,OACdC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,OAAQtC,KAAK4E,YAAc5E,KAAK4E,WAAWlC,IAAIH,IACzCvC,KAAK6E,YAAc7E,KAAK6E,WAAWnC,IAAIH,IAM/C7B,EAAAQ,UAAAgC,gBAAA,SAAgBlB,EAAUM,OAClBC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,OAAOtC,KAAK8E,eAAiB9E,KAAK8E,cAAcpC,IAAIH,IAGtD7B,EAAAQ,UAAA+B,oCAAA,SAAoCjB,EAAUM,OACtCC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,OAAOtC,KAAKG,UAAYH,KAAKG,SAASuC,IAAIH,IAG5C7B,EAAAQ,UAAA6D,iBAAA,SAAiB/C,EAAUM,OACnBC,EAAmBP,EAAIQ,MAAMC,OAAO,cAAgBH,EAE1D,OAAOtC,KAAKgF,kBAAoBhF,KAAKgF,iBAAiBtC,IAAIH,wBAlN7D0C,EAAAA,UAAS3E,KAAA,CAAC,CACT4E,SAAU,oBACVC,SAAA,0+JANOpF,mCAaNqF,EAAAA,wBAIAA,EAAAA,6BAIAA,EAAAA,wBAIAA,EAAAA,qBAIAA,EAAAA,mBAIAA,EAAAA,oBAIAA,EAAAA,gCAEAA,EAAAA,kCACAA,EAAAA,0CACAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,6BACAA,EAAAA,gCACAA,EAAAA,iCAKAA,EAAAA,4BAEAC,EAAAA,+BACAA,EAAAA,6BAEAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,UA8JH3E,EApNA,OCPMF,EAASC,EAEf6E,EAAA,WAAA,SAAAA,IAiBYtF,KAAAuF,aAAqC,IAAI1E,EAAAA,aAIzCb,KAAAe,aAAqC,IAAIF,EAAAA,aAqFrD,OAvEE2E,OAAAC,eAAIH,EAAApE,UAAA,WAAQ,KAAZ,WACE,OAAOlB,KAAK0F,eAMd,SAAsBlE,GACpBxB,KAAK2F,WAAWnE,oCAMlB8D,EAAApE,UAAAyE,WAAA,SAAWnE,GACTxB,KAAK0F,UAAYlE,EACjBxB,KAAK4F,eAAepE,IAMtB8D,EAAApE,UAAA0E,eAAA,SAAepE,GACbxB,KAAKuF,aAAa5D,KAAKH,IAMzB8D,EAAApE,UAAA2E,eAAA,SAAepE,GACbzB,KAAKe,aAAaY,KAAKF,IAMzB6D,EAAApE,UAAA4E,UAAA,WACE9F,KAAKyB,MAAQjB,IACbR,KAAK6F,eAAe7F,KAAKyB,QAM3B6D,EAAApE,UAAA6E,QAAA,WACE,OAAOvF,MAAaA,EAAOR,KAAKyB,QAMlC6D,EAAApE,UAAA8E,YAAA,eACMzE,EAAS,EACS,SAAlBvB,KAAKwB,WACPD,EAAS,GAEXvB,KAAKyB,MAAQjB,EAAOR,KAAKyB,OAAOwE,SAAS1E,EAAQ,OACjDvB,KAAK6F,eAAe7F,KAAKyB,QAM3B6D,EAAApE,UAAAgF,QAAA,eACM3E,EAAS,EACS,SAAlBvB,KAAKwB,WACPD,EAAS,GAEXvB,KAAKyB,MAAQjB,EAAOR,KAAKyB,OAAOC,IAAIH,EAAQ,OAC5CvB,KAAK6F,eAAe7F,KAAKyB,4BAxG5BwD,EAAAA,UAAS3E,KAAA,CAAC,CACT4E,SAAU,sBACVC,SAAA,2xHAOCC,EAAAA,mBAIAA,EAAAA,4BAIAC,EAAAA,6BAIAA,EAAAA,oCAIAD,EAAAA,wBAiBAA,EAAAA,SAgEHE,EA1GA,OCIM9E,EAASC,EAEf0F,EAAA,WAmIE,SAAAA,EAAoBC,EACAzF,GADAX,KAAAoG,GAAAA,EACApG,KAAAW,eAAAA,EAjHXX,KAAAwD,cAA+B,CACtCK,GAAI,KACJhB,QAAS,GACTwD,KAAM,GACNC,YAAa,EACbC,cAAe,EACf9C,SAAU,GACVM,MAAO,EACPyC,MAAO,GACPC,WAAY,aACZC,SAAU,aACVC,WAAY,QACZC,SAAU,SAKH5G,KAAAyB,MAAgBjB,IAIhBR,KAAA2C,IAAcnC,IAIdR,KAAA6G,sBAA+C,CACtD1C,SAAU,CACR2C,IAAK,CACHC,KAAM,UACNC,SAAU,aAEZC,MAAO,cACPC,WAAY,kCACZlF,IAAK,OACLmF,WAAY,UACZC,KAAM,UACNC,MAAO,yBACPC,SAAU,4BACVC,aAAc,CACZC,MAAO,uBACPC,KAAM,2BAER3H,QAAS,CACPsE,KAAM,wBAOFpE,KAAA0H,gBAAwC,IAAI7G,EAAAA,aAI5Cb,KAAA2H,eAAwC,IAAI9G,EAAAA,aAI5Cb,KAAAc,eAAwC,IAAID,EAAAA,aAItDb,KAAA6B,KAAmB,GAyDnB7B,KAAA4H,iBAA8B,GAc9B5H,KAAA0F,UAAY,OAoYd,OAhZEF,OAAAC,eAAIU,EAAAjF,UAAA,kBAAe,KAAnB,WACE,OAAOlB,KAAK4H,sBAGd,SAA6BC,GACvBA,EAAgB/F,SAClB9B,KAAK4H,iBAAmBC,GAE1B7H,KAAK8H,gDAMPtC,OAAAC,eAAIU,EAAAjF,UAAA,WAAQ,KAAZ,WACE,OAAOlB,KAAK0F,eAGd,SAAsBlE,GACpBxB,KAAK0F,UAAYlE,EACjBxB,KAAK+H,+CAGA5B,EAAA6B,qBAAP,SAA4BC,EAAyBC,OAC7C5F,EAAa2F,EAAclB,OACjC,MAAO,CAACzE,KAAIA,EAAE6F,QAAShC,EAAkBiC,qBAAqB5H,EAAO8B,EAAKwB,UAAWoE,KAGhF/B,EAAAiC,qBAAP,SAA4BD,EAAiBD,GAK3C,OAJIC,EAAQE,UAAYH,GAAiB,GACvCC,EAAQE,QAAQF,EAAQE,UAAaF,EAAQE,UAAYH,GAGpDC,GAGFhC,EAAAmC,sCAAP,SAA6C7G,EAAekB,EAAac,GACrChC,EAAM8G,KAAK5F,GAAK6F,QAAQ/E,EAAU,WAEpE,MAAO,CACLhC,MAAKA,EACLkB,IAAGA,IAOPwD,EAAAjF,UAAAuH,YAAA,WACEzI,KAAK8H,gBAMP3B,EAAAjF,UAAAwH,YAAA,WACE1I,KAAK6B,KAAO,GACZ7B,KAAKiC,iBAAmB,IAAI7B,IAC5BJ,KAAK8E,cAAgB,IAAI6D,IACzB3I,KAAKgF,iBAAmB,IAAI2D,IAC5B3I,KAAK4E,WAAa,IAAI+D,IACtB3I,KAAK6E,WAAa,IAAI8D,IACtB3I,KAAK2E,UAAY,IAAIgE,IACrB3I,KAAKyE,mBAAqB,IAAIrE,IAC9BJ,KAAKG,SAAW,IAAIC,IACpBJ,KAAKW,eAAeR,SAAS4G,KAAK/G,KAAKG,WAQzCgG,EAAAjF,UAAA6G,YAAA,WACE,GAAsB,QAAlB/H,KAAKwB,SAIP,OAHAxB,KAAK2C,IAAM3C,KAAKyB,MAChBzB,KAAK4I,cAAgBpI,EAAOR,KAAKyB,OAAOoH,QAAQ,YAChD7I,KAAK8I,YAActI,EAAOR,KAAK2C,KAAKoG,MAAM,QAErC,GAAsB,eAAlB/I,KAAKwB,SAId,OAHAxB,KAAK2C,IAAMnC,EAAOR,KAAKyB,OAAOC,IAAI,EAAG,QACrC1B,KAAK4I,cAAgBpI,EAAOR,KAAKyB,OAAOoH,QAAQ,YAChD7I,KAAK8I,YAActI,EAAOR,KAAK2C,KAAKoG,MAAM,QAMvC/I,KAAKyB,QACRzB,KAAKyB,MAAQjB,KAEfR,KAAKyB,MAAQjB,EAAOR,KAAKyB,OAAOO,IALf,GAK6B6G,QAAQ,OACtD7I,KAAK2C,IAAMnC,EAAOR,KAAKyB,OAAOC,IAAI,EAAG,QAAQqH,MAAM,OAEnD/I,KAAK4I,cAAgBpI,EAAOR,KAAKyB,OAAOoH,QAAQ,OAChD7I,KAAK8I,YAActI,EAAOR,KAAK2C,KAAKoG,MAAM,QAO5C5C,EAAAjF,UAAA4G,aAAA,WACE9H,KAAK0I,cACL1I,KAAK+H,cACL/H,KAAKgJ,aAAahJ,KAAKyB,MAAOzB,KAAK2C,KACnC3C,KAAKiJ,WAAWjJ,KAAKyB,MAAOzB,KAAK2C,KACjC3C,KAAKkJ,sBAMP/C,EAAAjF,UAAA8H,aAAA,SAAavH,EAAekB,GAM1B,QAJMwG,EAAsB1H,EACzB8G,KAAK5F,GACL6F,QAAQ,EAAG,QAEPW,EAAUC,WAAW,KACpBC,EAAqBF,EAAUpC,OACrC/G,KAAK6B,KAAKyH,KAAK,CACbjC,MAAOgC,EAAa5G,OAAO,cAC3BN,IAAKkH,EAAa5G,OAAO,cACzBD,MAAOhC,EAAO6I,EAAavF,YAE7B9D,KAAKiC,iBAAiBsH,IAAIF,EAAa5G,OAAO,cAAe,MAOjE0D,EAAAjF,UAAAsI,cAAA,SAAchI,GACZxB,KAAKwB,SAAWA,EAChBxB,KAAK0H,gBAAgB/F,KAAKH,GAC1BxB,KAAK8H,gBAMP3B,EAAAjF,UAAA2E,eAAA,SAAepE,GACbzB,KAAKyB,MAAQA,EACbzB,KAAK8H,gBAMP3B,EAAAjF,UAAAuI,eAAA,SAAe3J,GACbE,KAAKG,SAASoJ,IAAI/I,EAAOV,EAAQ2B,OAAOgB,OAAO,mBAAoB3C,GACnEE,KAAKW,eAAeR,SAAS4G,KAAK/G,KAAKG,UACvCH,KAAK0D,WAAW5D,GAChBE,KAAK2H,eAAehG,KAAK7B,IAM3BqG,EAAAjF,UAAAwI,iBAAA,SAAiBvG,GACfnD,KAAKG,SAASwJ,OAAOxG,EAAOhB,KAC5BnC,KAAKW,eAAeR,SAAS4G,KAAK/G,KAAKG,UACvCH,KAAKoD,cAAcD,EAAOrD,SAC1BE,KAAKc,eAAea,KAAKwB,EAAOrD,UAMlCqG,EAAAjF,UAAAgI,mBAAA,WAAA,IAAA9H,EAAApB,KAEE,GAAKA,KAAKiC,kBAAqBjC,KAAKwD,cAApC,CAIAxD,KAAK4J,aAAe5J,KAAKwD,cAAcC,aAEjCoG,EAA6BrJ,EAAOR,KAAKwD,cAAciD,WAAY,cAAcoC,QAAQ,OACzFiB,EAA2BtJ,EAAOR,KAAKwD,cAAckD,SAAU,cAAcqC,MAAM,OACzF/I,KAAK0E,2BAA6B,IAAItE,IACtCJ,KAAKiC,iBAAiB8H,SAAO,SAAEC,EAAMhI,OAC/BiI,EAAc,EAEZC,EAAS1J,EAAOwB,EAAK,cAAcmI,KAAK,GACxCC,EAAkB5J,EAAOwB,EAAMZ,EAAKoC,cAAcmD,WAAY,kBAGpE,IAAIyD,EAAgBC,SAAS7J,IAASqI,QAAQ,QAA9C,KAIMyB,EAAkB9J,IAASkB,IAAIN,EAAKoC,cAAc+C,cAAe,SAEjEgE,EAAgB/J,EAAOwB,EAAMZ,EAAKoC,cAAcoD,SAAU,mBAChE2D,EAActE,SAAS7E,EAAKwI,aAAc,eAEpCY,EAAsBJ,EAAgB7B,KAAKgC,GAC9C/B,QAAQpH,EAAKoC,cAAcC,SAAU,WACxC,GAAIrC,EAAKwH,eAAiBxH,EAAK0H,aAAeoB,EAAOO,UAAUZ,EAAoBC,GACjF,KAAOU,EAAUpB,WAAW,KACpB9G,EAAakI,EAAUzD,OACLvG,EAAO8B,EAAKwB,UACvBuG,SAASC,KACpBN,EAAKV,KAAKhH,EAAKG,OAAO,UACtBwH,KAIN7I,EAAKsD,2BAA2B6E,IAAIvH,EAAKiI,SAO7C9D,EAAAjF,UAAAwC,WAAA,SAAW5D,GAIT,QAHMuD,EAAW7C,EAAOV,EAAQ2B,OAC1B6B,EAAS9C,EAAOV,EAAQ6C,KACxB+H,EAA2BrH,EAASkF,KAAKjF,GAAQqH,aAAa7K,EAAQ2D,SAAU,WAC/EiH,EAAetB,WAAW,KACzB9G,EAAaoI,EAAe3D,OAClC/G,KAAK8E,cAAcpD,IAAIY,EAAKG,OAAO,oBAC9BiI,EAAetB,WAClBpJ,KAAKgF,iBAAiBtD,IAAIY,EAAKG,OAAO,wBAIpCmI,EAAgBvH,EAASE,QAAQ0C,SAASjG,KAAK4J,aAAc,WACnEgB,EAAcvC,QACZuC,EAAcvC,UACbuC,EAAcvC,UAAYvI,EAAQ2D,SAAY3D,EAAQ2D,UAEzD,QADMoH,EAA6BD,EAAcrC,KAAKlF,GAAUmF,QAAQ1I,EAAQ2D,SAAU,WACnFoH,EAAiBzB,WAAW,CAC3B9G,EAAauI,EAAiB9D,QAC9BoB,EAAkBhC,EAAkBiC,qBAAqB5H,EAAO8B,EAAKwB,UAAWhE,EAAQ2D,WAClFqH,cAAcF,IAAkBzC,EAAQkC,SAAShH,IAC3DrD,KAAK4E,WAAWlD,IAAIyG,EAAQ1F,OAAO,wBAIjCsI,EAAczH,EAAOC,QAC3BwH,EAAY9E,SAAS8E,EAAY1C,UAAYvI,EAAQ2D,UAGrD,QAFMuH,EAAcD,EAAYxH,QAAQ7B,IAAI5B,EAAQiE,MAAO,WACrDkH,EAA2BF,EAAYxC,KAAKyC,GAAaxC,QAAQ1I,EAAQ2D,SAAU,WAClFwH,EAAe7B,WAAW,KAEzBjB,EADA7F,EAAa2I,EAAelE,QAC5BoB,EAAkBhC,EAAkBiC,qBAAqB5H,EAAO8B,EAAKwB,UAAWhE,EAAQ2D,WAClFqH,cAAcC,IAAgB5C,EAAQkC,SAASW,IACzDhL,KAAK6E,WAAWnD,IAAIyG,EAAQ1F,OAAO,sBAQzC0D,EAAAjF,UAAAkC,cAAA,SAActD,GAIZ,QAHMuD,EAAW7C,EAAOV,EAAQ2B,OAC1B6B,EAAS9C,EAAOV,EAAQ6C,KACxB+H,EAA2BrH,EAASkF,KAAKjF,GAAQkF,QAAQ1I,EAAQ2D,SAAU,WAC1EiH,EAAetB,WAAW,KACzB9G,EAAaoI,EAAe3D,OAClC/G,KAAK8E,cAAc6E,OAAOrH,EAAKG,OAAO,oBACjCiI,EAAetB,WAClBpJ,KAAKgF,iBAAiB2E,OAAOrH,EAAKG,OAAO,wBAIvCmI,EAAgBvH,EAASE,QAAQ0C,SAASjG,KAAK4J,aAAc,WACnEgB,EAAcvC,QACZuC,EAAcvC,UACbuC,EAAcvC,UAAYvI,EAAQ2D,SAAY3D,EAAQ2D,UAEzD,QADMyH,EAA2BN,EAAcrC,KAAKlF,GAAUmF,QAAQ1I,EAAQ2D,SAAU,WACjFyH,EAAe9B,WAAW,CACzB9G,EAAa4I,EAAenE,QAC5BoB,EAAkBhC,EAAkBiC,qBAAqB5H,EAAO8B,EAAKwB,UAAWhE,EAAQ2D,WAClFqH,cAAcF,IAAkBzC,EAAQkC,SAAShH,IAC3DrD,KAAK4E,WAAW+E,OAAOxB,EAAQ1F,OAAO,oBAI1C,GAAI3C,EAAQiE,MAAO,KACXgH,EAAczH,EAAOC,QAC3BwH,EAAY9E,SAAS8E,EAAY1C,UAAYvI,EAAQ2D,UAGrD,QAFMuH,EAAcD,EAAYxH,QAAQ7B,IAAI5B,EAAQiE,MAAO,WACrDkH,EAA2BF,EAAYxC,KAAKyC,GAAaxC,QAAQ1I,EAAQ2D,SAAU,WAClFwH,EAAe7B,WAAW,KAEzBjB,EADA7F,EAAa2I,EAAelE,QAC5BoB,EAAkBhC,EAAkBiC,qBAAqB5H,EAAO8B,EAAKwB,UAAWhE,EAAQ2D,WAClFqH,cAAcC,IAAgB5C,EAAQkC,SAASW,IACzDhL,KAAK6E,WAAW8E,OAAOxB,EAAQ1F,OAAO,uBAU9C0D,EAAAjF,UAAA+H,WAAA,SAAWxH,EAAekB,GAA1B,IAAAvB,EAAApB,KACOA,KAAKwD,eAGN2H,MAAMC,QAAQpL,KAAK4H,mBAAqB5H,KAAK4H,iBAAiB9F,QAChE9B,KAAK4H,iBAAiBmC,SAAO,SAAEjK,GAC7B,GAAIU,EAAOV,EAAQ2B,OAAOqJ,cAAcrJ,IACtCjB,EAAOV,EAAQ6C,KAAK0I,eAAe1I,GAAM,KACrC2I,EAAgB9K,EAAOV,EAAQ2B,MAAO,mBAC1C6J,EAAgBlK,EAAKmK,gBAAgBD,EAAexL,GACpDsB,EAAKoK,qBAAqBF,QASlCnF,EAAAjF,UAAAqK,gBAAA,SAAgBD,EAAuBxL,OAC/B2L,EAAcjL,EAAOV,EAAQ6C,IAAK,mBAExC,KAAK2I,GAAkBA,EAAcI,WAC/BD,GAAgBA,EAAYC,WAC5BJ,EAAcD,eAAeI,IAEjC,OADAE,QAAQC,MAAM,gBAAiB9L,EAAQ6C,IAAK2I,EAAeG,GACpD,KAKT,QAFMI,EAA4BP,EAAc/C,KAAKkD,GAAajD,QAAQ1I,EAAQ2D,SAAU,WAErFoI,EAAgBzC,WAAW,CAC1B,IAAA0C,EAAA3F,EAAA6B,qBAAA6D,EAAA/L,EAAA2D,UAACnB,EAAAwJ,EAAAxJ,KAAMwJ,EAAA3D,QAEb,GAAInI,KAAKiC,kBACPjC,KAAKiC,iBAAiBS,IAAIJ,EAAKG,OAAO,iBACrCzC,KAAK2E,UAAUjC,IAAIJ,EAAKG,OAAO,sBAC/BzC,KAAKiC,iBAAiBC,IAAII,EAAKG,OAAO,eAAesJ,SAASzJ,EAAKG,OAAO,UAAW,CACtF,IAAM3C,EAAQwE,WACXxE,EAAQwE,WACPtE,KAAKuE,WACJzE,EAAQwE,UAAU0H,KAAG,SAACC,GAAK,OAAAA,EAAEpI,MAAIkI,SAAS/L,KAAKuE,SAASV,IAAO,KAC9DqI,EAAgBlM,KAAKyE,mBAAmB/B,IAAIJ,EAAKG,OAAO,eAC1DzC,KAAKyE,mBAAmBvC,IAAII,EAAKG,OAAO,eAAiB,EAC3DyJ,IACAlM,KAAKyE,mBAAmB8E,IAAIjH,EAAKG,OAAO,cAAeyJ,GACvDlM,KAAK2E,UAAUjD,IAAIY,EAAKG,OAAO,oBAE7B3C,EAAQwE,WAAatE,KAAKuE,UAAYzE,EAAQwE,UAAU0H,KAAG,SAACC,GAAK,OAAAA,EAAEpI,MAAIkI,SAAS/L,KAAKuE,SAASV,MAChG7D,KAAK8E,cAAcpD,IAAIY,EAAKG,OAAO,oBACnCzC,KAAKmM,eAAeN,EAAiBvJ,EAAMxC,KAMjD,OAFAE,KAAKW,eAAeR,SAAS4G,KAAK/G,KAAKG,UAEhCmL,GASTnF,EAAAjF,UAAAiL,eAAA,SAAeN,EAA2BvJ,EAAYxC,GACpDE,KAAKG,SAASoJ,IAAIjH,EAAKG,OAAO,mBAAoB3C,GAC7C+L,EAAgBzC,WACnBpJ,KAAKgF,iBAAiBtD,IAAIY,EAAKG,OAAO,qBAO1C0D,EAAAjF,UAAAsK,qBAAA,SAAqBF,GACnB,GAAKA,GAAkBtL,KAAK4J,aAA5B,KAKMgB,EAAgBU,EAAc/H,QAAQ0C,SAASjG,KAAK4J,aAAc,WACxEgB,EAAcvC,QAAQuC,EAAcvC,UACjCuC,EAAcvC,UAAYrI,KAAKwD,cAAcC,SAAYzD,KAAKwD,cAAcC,UAE/E,QADM2I,EAA8BxB,EAAcrC,KAAK+C,GAAe9C,QAAQxI,KAAKwD,cAAcC,SAAU,WACpG2I,EAAkBhD,WAAW,CAC5B,IAAA0C,EAAA3F,EAAA6B,qBAAAoE,EAAApM,KAAAwD,cAAAC,UAACnB,EAAAwJ,EAAAxJ,KAAMwJ,EAAA3D,QAEb,GAAInI,KAAKiC,kBAAoBjC,KAAKiC,iBAAiBS,IAAIJ,EAAKG,OAAO,iBAC7DzC,KAAK2E,UAAUjC,IAAIJ,EAAKG,OAAO,qBAChCzC,KAAKiC,iBAAiBC,IAAII,EAAKG,OAAO,eAAe4J,QAAQ/J,EAAKG,OAAO,WAAa,EAAG,KACxFyJ,EAAgBlM,KAAKyE,mBAAmB/B,IAAIJ,EAAKG,OAAO,eAC1DzC,KAAKyE,mBAAmBvC,IAAII,EAAKG,OAAO,eAAiB,EAC3DyJ,IACAlM,KAAKyE,mBAAmB8E,IAAIjH,EAAKG,OAAO,cAAeyJ,GAEzDlM,KAAK2E,UAAUjD,IAAIY,EAAKG,OAAO,2CAzhBpCwC,EAAAA,UAAS3E,KAAA,CAAC,CAET4E,SAAU,eAEVC,SAAA,+2DAjBOmH,EAAAA,yBASAvM,mCAeNqF,EAAAA,wBAIAA,EAAAA,6BAIAA,EAAAA,qBAiBAA,EAAAA,mBAIAA,EAAAA,qCAIAA,EAAAA,+BAyBAC,EAAAA,+BAIAA,EAAAA,+BAIAA,EAAAA,gCAmEAD,EAAAA,wBAcAA,EAAAA,SA8XHe,EA5hBA,GCbA,IAAAoG,EAAA,WAUA,SAAAA,KAkBA,2BAlBCC,EAAAA,SAAQlM,KAAA,CAAC,CACRmM,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBACAC,EAAAA,eAEFC,aAAc,CACZ1G,EACAb,EACA5E,GAEFoM,QAAS,CACP3G,EACAb,EACA5E,OAIJ6L,EA5BA","sourcesContent":["export interface Event {\n  id: string;\n  start: Date;\n  end: Date;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: any;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Session } from './session';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  sessionsEntries$: BehaviorSubject<Session[]> = new BehaviorSubject<Session[]>([]);\n\n  sessions: BehaviorSubject<Map<string, Session>> = new BehaviorSubject<Map<string, Session>>(new Map<string, Session>());\n\n  constructor() {\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\nimport { SessionService } from '../../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent implements OnInit {\n  /**\n   * User could be passed to show session owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: string;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private sessionService: SessionService) {\n  }\n\n  ngOnInit() {\n    this.sessionService.sessions\n      .subscribe((sessions) => {\n        this.sessions = sessions;\n      });\n  }\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): string[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.comment) {\n        return session.comment;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time) && !this.isSlotInSession(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n    } else if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session};\n      this.removeSession(source);\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      id: null,\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.pause || 0,\n      duration: this.onlineSession.duration,\n      nb_persons: 1,\n      event_type: EventType.session,\n      comment: this.bodyConfiguration.calendar.session.info,\n      user: this.user,\n      customers: [this.customer]\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessions && this.sessions.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsEndSlots && this.sessionsEndSlots.has(datetime);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: string;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: string) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: string) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { SessionService } from '../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to show the owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    id: null,\n    comment: '',\n    name: '',\n    max_persons: 1,\n    booking_delay: 1,\n    duration: 15,\n    pause: 0,\n    price: 10,\n    start_date: '2019-01-01',\n    end_date: '2030-12-31',\n    start_time: '08:00',\n    end_time: '19:00'\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef,\n              private sessionService: SessionService) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n    }\n    this.loadCalendar();\n  }\n\n  // Default View Mode of Week Component\n  _viewMode = 'week';\n\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  static geStartEndFromStartAndSessionDuration(start: Moment, end: Moment, duration: number): {start: Moment, end: Moment} {\n    const eventsTimeRange: TwixIter = start.twix(end).iterate(duration, 'minutes');\n\n    return {\n      start,\n      end\n    };\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.days = [];\n    this.daysAvailability = new Map();\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n    this.sessions = new Map();\n    this.sessionService.sessions.next(this.sessions);\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay).startOf('day');\n    this.end = moment(this.start).add(6, 'days').endOf('day');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.setDateRange(this.start, this.end);\n    this.loadEvents(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: string) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.sessionService.sessions.next(this.sessions);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.sessionService.sessions.next(this.sessions);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.start_date, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.end_date, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.start_time, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.end_time, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n        this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    while (timeEarlyRange.hasNext()) {\n      const time: Twix = timeEarlyRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n      while (timePauseRange.hasNext()) {\n        const time: Twix = timePauseRange.next();\n        const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n        if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    if (!this.onlineSession) {\n      return;\n    }\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries.forEach((session: Session) => {\n        if (moment(session.start).isSameOrAfter(start) &&\n          moment(session.end).isSameOrBefore(end)) {\n          let mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n          mmtEventStart = this.buildinBusySlot(mmtEventStart, session);\n          this.buildingEarliestSlot(mmtEventStart);\n        }\n      });\n    }\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(mmtEventStart: Moment, session: Session): Moment {\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isSameOrBefore(mmtEventEnd)) {\n      console.error('invalid dates', session.end, mmtEventStart, mmtEventEnd);\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.duration, 'minutes');\n\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        !this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        if ((!session.customers ||\n          (session.customers &&\n            this.customer &&\n            !session.customers.map(c => c.id).includes(this.customer.id)))) {\n          let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n            this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n          dayBusyNumber++;\n          this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n          this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n        }\n        if (session.customers && this.customer && session.customers.map(c => c.id).includes(this.customer.id)) {\n          this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          this.setSessionSlot(eventsTimeRange, time, session);\n        }\n      }\n    }\n    this.sessionService.sessions.next(this.sessions);\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Build in sessions Map only start session with its session\n   * @param eventsTimeRange\n   * @param time\n   * @param session\n   */\n  setSessionSlot(eventsTimeRange: TwixIter, time: Twix, session: Session) {\n    this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n    if (!eventsTimeRange.hasNext()) {\n      this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(mmtEventStart: Moment) {\n    if (!mmtEventStart || !this.realDuration) {\n      return;\n    }\n\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.duration) + this.onlineSession.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.duration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatIconModule,\n} from '@angular/material';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n"]}