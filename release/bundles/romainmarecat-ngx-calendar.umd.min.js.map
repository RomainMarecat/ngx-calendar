{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.service.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts"],"names":["EventType","absence","session","SessionService","this","sessionsEntries$","BehaviorSubject","sessions","Map","Injectable","args","providedIn","moment","moment_","CalendarBodyComponent","sessionService","sessionAdded","EventEmitter","sessionRemoved","startChanged","endChanged","slotLocked","prototype","ngOnInit","_this","subscribe","onNextDay","daysNb","viewMode","start","add","emit","isAllSlotNotAvailable","days","length","filter","day","daysAvailability","get","key","getAvailabilities","getSessionTitle","time","datetime","value","format","has","end","getSessionTooltip","comment","onTimeSlotClicked","isSlotBusy","isSlotEarly","isDateTimeInSessionsFromCurrentUser","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","duration","addSession","Date","toJSON","id","toDate","pause","nb_persons","event_type","bodyConfiguration","calendar","info","user","customers","customer","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","isSlotInSession","sessionsSlots","sessionsStartSlots","sessionsEndSlots","isSlotSessionStart","isSlotSessionEnd","Component","selector","template","Input","Output","CalendarHeaderComponent","switchedView","Object","defineProperty","_viewMode","switchView","onSwitchedView","onStartChanged","goToToday","isToday","previousDay","subtract","nextDay","CalendarComponent","cd","name","max_persons","booking_delay","price","start_date","end_date","start_time","end_time","calendarConfiguration","cta","next","previous","today","back_today","three_days","week","title","subtitle","availability","empty","slot","viewModeChanged","sessionCreated","_sessionsEntries","sessionsEntries","loadCalendar","setViewMode","splitRangeToNextTime","slotTimeRange","slotDuration","mmtTime","getMinutesDifference","minutes","ngOnChanges","setCalendar","Set","calendarStart","startOf","calendarEnd","endOf","setDateRange","loadEvents","loadAvailabilities","daysRange","twix","iterate","hasNext","availableDay","push","set","onSwithedView","onSessionAdded","onSessionRemoved","delete","realDuration","onlineSessionStart","onlineSessionEnd","forEach","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","isBefore","minMmtStartTime","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","timeEarlierRange","handleEarlySlot","mmtEarlyEnd","mmtPauseEnd","timePauseRange","handlePauseSlot","timeEarlyRange","Array","isArray","isSameOrAfter","isSameOrBefore","buildinBusySlot","buildingEarliestSlot","mmtEventStart","mmtEventEnd","isValid","console","error","eventsTimeRange","_a","includes","map","c","addDayBusySlot","setSessionSlot","earliestTimeRange","dayBusyNumber","action","ChangeDetectorRef","NgxCalendarModule","NgModule","imports","CommonModule","FlexLayoutModule","MatIconModule","declarations","exports"],"mappings":"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","sourcesContent":["export interface Event {\n  id: string;\n  start: Date;\n  end: Date;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: any;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Session } from './session';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  sessionsEntries$: BehaviorSubject<Session[]> = new BehaviorSubject<Session[]>([]);\n\n  sessions: BehaviorSubject<Map<string, Session>> = new BehaviorSubject<Map<string, Session>>(new Map<string, Session>());\n\n  constructor() {\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\nimport { SessionService } from '../../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent implements OnInit {\n  /**\n   * User could be passed to show session owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: string;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessionsStartSlots: Set<string>;\n  sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private sessionService: SessionService) {\n  }\n\n  ngOnInit() {\n    this.sessionService.sessions\n      .subscribe((sessions) => {\n        this.sessions = sessions;\n      });\n  }\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): string[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.comment) {\n        return session.comment;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n      return;\n    }\n\n    if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session};\n      this.removeSession(source);\n      return;\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      id: null,\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.pause || 0,\n      duration: this.onlineSession.duration,\n      nb_persons: 1,\n      event_type: EventType.session,\n      comment: this.bodyConfiguration.calendar.session.info,\n      user: this.user,\n      customers: [this.customer]\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return this.sessions &&\n      this.sessions.has(datetime) &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')) &&\n      this.sessionsStartSlots.has(datetime) &&\n      this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm'));\n  }\n\n  isSlotSessionStart(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsStartSlots.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return (this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsEndSlots.has(datetime)) ||\n      (this.sessionsStartSlots.has(datetime) &&\n        session &&\n        this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')));\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: string;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: string) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: string) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { SessionService } from '../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to show the owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    id: null,\n    comment: '',\n    name: '',\n    max_persons: 1,\n    booking_delay: 1,\n    duration: 15,\n    pause: 0,\n    price: 10,\n    start_date: '2019-01-01',\n    end_date: '2030-12-31',\n    start_time: '08:00',\n    end_time: '19:00'\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsStartSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef,\n              private sessionService: SessionService) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n    }\n    this.loadCalendar();\n  }\n\n  // Default View Mode of Week Component\n  _viewMode = 'week';\n\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.days = [];\n    this.daysAvailability = new Map();\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.sessionsStartSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n    this.sessions = new Map();\n    this.sessionService.sessions.next(this.sessions);\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay).startOf('day');\n    this.end = moment(this.start).add(6, 'days').endOf('day');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.setDateRange(this.start, this.end);\n    this.loadEvents(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: string) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.sessionService.sessions.next(this.sessions);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.sessionService.sessions.next(this.sessions);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.start_date, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.end_date, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.start_time, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.end_time, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlierRange, 'add', session, mmtEarlyStart, mmtStart);\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n    this.handlePauseSlot(timePauseRange, 'add', session, mmtEarlyStart, mmtEarlyEnd);\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlyRange, 'remove', session, mmtEarlyStart, mmtStart);\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n      this.handlePauseSlot(timePauseRange, 'remove', session, mmtEarlyStart, mmtEarlyEnd);\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    if (!this.onlineSession) {\n      return;\n    }\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries.forEach((session: Session) => {\n        if (moment(session.start).isSameOrAfter(start) &&\n          moment(session.end).isSameOrBefore(end)) {\n          this.buildinBusySlot(session);\n          this.buildingEarliestSlot(session);\n        }\n      });\n    }\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(session: Session): Moment {\n    const mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isSameOrBefore(mmtEventEnd)) {\n      console.error('invalid dates', mmtEventStart, mmtEventEnd);\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.duration, 'minutes');\n\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        !this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        if ((!session.customers ||\n          (session.customers &&\n            this.customer &&\n            !session.customers.map(c => c.id).includes(this.customer.id)))) {\n          this.addDayBusySlot(time);\n        }\n        if (session.customers && this.customer && session.customers.map(c => c.id).includes(this.customer.id)) {\n          this.setSessionSlot(eventsTimeRange, time, session);\n        }\n      }\n    }\n    this.sessionService.sessions.next(this.sessions);\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Build in sessions Map only start session with its session\n   */\n  setSessionSlot(eventsTimeRange: TwixIter, time: Twix, session: Session) {\n    this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n    if (!eventsTimeRange.hasNext()) {\n      this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      return;\n    }\n    this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n    this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(session: Session) {\n    const mmtEventStart: Moment = moment(session.start, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !this.realDuration) {\n      return;\n    }\n\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.duration) + this.onlineSession.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.duration);\n      /* IF the busy slot is in availability and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        this.addDayBusySlot(time);\n      }\n    }\n  }\n\n  /**\n   * Add in busy slot new unavailable time reference\n   */\n  addDayBusySlot(time: Twix) {\n    let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n      this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n    dayBusyNumber++;\n    this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n    this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Remove/add from pauseSlot sessions start/end interval\n   */\n  handlePauseSlot(timePauseRange: TwixIter, action: string, session: Session, start: Moment, end: Moment) {\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(start) && mmtTime.isBefore(end)) {\n        if (action === 'remove') {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n        if (action === 'add') {\n          this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove/add from earlySlot all sessions\n   */\n  handleEarlySlot(timeEarlierRange: TwixIter,\n                  action: string,\n                  session: Session,\n                  mmtEarlyStart: Moment,\n                  mmtStart: Moment) {\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        if (action === 'add') {\n          this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n\n        if (action === 'remove') {\n          this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatIconModule,\n} from '@angular/material';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n"]}