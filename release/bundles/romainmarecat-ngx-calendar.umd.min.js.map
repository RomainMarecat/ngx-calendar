{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.ts"],"names":["Event","absence","session","moment","moment_","CalendarBodyComponent","prototype","onNextDay","daysNb","this","viewMode","start","add","startChanged","emit","isAllSlotNotAvailable","_this","days","length","filter","day","daysAvailability","get","key","getAvailabilities","getSessionTitle","time","datetime","value","format","sessions","has","end","getSessionTooltip","details","info","onTimeSlotClicked","isSlotBusy","isSlotEarly","slotLocked","isDateTimeInSessionsFromCurrentUser","isSlotInSession","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","session_type","duration","addSession","Date","toJSON","toDate","pause","nb_persons","event_type","EventType","bodyConfiguration","calendar","user","uid","displayName","email","sessionAdded","sessionRemoved","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","sessionsSlots","isSlotSessionEnd","sessionsEndSlots","Component","args","selector","template","Input","Output","EventEmitter","endChanged","CalendarHeaderComponent","Object","defineProperty","_viewMode","switchView","onSwitchedView","switchedView","onStartChanged","goToToday","isToday","previousDay","subtract","nextDay","CalendarComponent","_sessionsEntries","sessionsEntries","loadCalendar","setViewMode","splitRangeToNextTime","slotTimeRange","slotDuration","next","mmtTime","getMinutesDifference","minutes","geStartEndFromStartAndSessionDuration","twix","iterate","ngOnChanges","setCalendar","Set","Map","calendarStart","startOf","calendarEnd","endOf","loadEvents","setDateRange","loadAvailabilities","daysRange","hasNext","availableDay","push","title","set","onSwithedView","viewModeChanged","onSessionAdded","sessionCreated","onSessionRemoved","delete","realDuration","onlineSessionStart","date_range","onlineSessionEnd","forEach","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","time_range","isBefore","minMmtStartTime","booking_delay","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","timeEarlierRange","isSameOrAfter","mmtEarlyEnd","mmtPauseEnd","timePauseRange","timeEarlyRange","Array","isArray","__spread","isSameOrBefore","mmtEventStart","buildinBusySlot","buildingEarliestSlot","cd","markForCheck","mmtEventEnd","isValid","console","error","eventsTimeRange","_a","indexOf","dayBusyNumber","earliestTimeRange","ChangeDetectorRef","name","max_persons","prices","calendarConfiguration","cta","previous","today","back_today","three_days","week","subtitle","availability","empty","slot","NgxCalendarModule","NgModule","imports","CommonModule","FlexLayoutModule","MatIconModule","declarations","exports","Session"],"mappings":"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","sourcesContent":["export class Event {\n  key?: string;\n  start: Date;\n  end: Date;\n  details: any;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: {\n    uid: string;\n    email: string;\n    displayName: string;\n  };\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: {\n    uid: string;\n    displayName: string;\n    email: string;\n  };\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: String;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): String[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.details.info) {\n        return session.details.info;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time) && !this.isSlotInSession(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.session_type.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n    } else if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session: session};\n      this.removeSession(source);\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.session_type.pause,\n      details: {\n        duration: this.onlineSession.session_type.duration,\n        nb_persons: 1,\n        event_type: EventType.session,\n        info: this.bodyConfiguration.calendar.session.info,\n      },\n      user: {\n        uid: this.user.uid,\n        displayName: this.user.displayName,\n        email: this.user.email,\n      }\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessions && this.sessions.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsEndSlots && this.sessionsEndSlots.has(datetime);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<String> = new EventEmitter<String>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: String;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: String) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: String) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { Event } from '../shared/event/event';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: {\n    uid: string;\n    displayName: string;\n    email: string;\n  };\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    key: null,\n    session_type: {\n      name: '',\n      max_persons: 1,\n      booking_delay: 1,\n      duration: 15,\n      pause: 0,\n    },\n    prices: [10, 20],\n    date_range: {\n      start: '2019-01-01',\n      end: '2030-12-31',\n    },\n    time_range: {\n      start: '08:00',\n      end: '19:00',\n    }\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment;\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment;\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<String> = new EventEmitter<String>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n      this.loadCalendar();\n    }\n  }\n\n  // Default View Mode of Week Component\n  _viewMode: String = 'week';\n\n  get viewMode(): String {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time: time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  static geStartEndFromStartAndSessionDuration(start: Moment, end: Moment, duration: number): {start: Moment, end: Moment} {\n    const eventsTimeRange: TwixIter = start.twix(end).iterate(duration, 'minutes');\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.sessions = new Map();\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay);\n    this.end = moment(this.start).add(6, 'days');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.loadEvents(this.start, this.end);\n    this.setDateRange(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    this.daysAvailability = new Map();\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    this.days = [];\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: String) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.session_type.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.date_range.start, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.date_range.end, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.time_range.start, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.session_type.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.time_range.end, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.session_type.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.details.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.details.duration) + session.details.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.details.duration, 'minutes');\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.details.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.details.duration, 'minutes');\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n        this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.details.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.details.duration) + session.details.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.details.duration, 'minutes');\n    while (timeEarlyRange.hasNext()) {\n      const time: Twix = timeEarlyRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.details.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.details.duration, 'minutes');\n      while (timePauseRange.hasNext()) {\n        const time: Twix = timePauseRange.next();\n        const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.details.duration);\n        if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries = [\n        ...this._sessionsEntries.filter((session: Session) => {\n          if (moment(session.start).isSameOrAfter(start) &&\n            moment(session.end).isSameOrBefore(end)) {\n            let mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n            mmtEventStart = this.buildinBusySlot(mmtEventStart, session);\n            this.buildingEarliestSlot(mmtEventStart);\n\n            return true;\n          }\n\n          return false;\n        })\n      ];\n    }\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(mmtEventStart: Moment, session: Session): Moment {\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isBefore(mmtEventEnd)) {\n      console.error('invalid dates');\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.details.duration, 'minutes');\n\n    let i = 0;\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.details.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n\n        if ((!session.user ||\n          (session.user &&\n            session.user.uid !== this.user.uid))) {\n          let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n            this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n          dayBusyNumber++;\n          this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n          this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n        }\n        if (session.user && session.user.uid === this.user.uid) {\n          this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n          if (!eventsTimeRange.hasNext()) {\n            this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          }\n        }\n      }\n    }\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(mmtEventStart: Moment) {\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.session_type.duration) + this.onlineSession.session_type.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.session_type.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.session_type.duration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatIconModule,\n} from '@angular/material';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n","import { EventType, Event } from '../event/event';\n\nexport class Session extends Event {\n  details: {\n    event_type: EventType,\n    nb_persons: number,\n    duration: number;\n    booking?: any;\n    info: string;\n    customers?: string[];\n  };\n}\n"]}