{"version":3,"sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts"],"names":["EventType","absence","session","moment","moment_","CalendarBodyComponent","this","sessionAdded","EventEmitter","sessionRemoved","startChanged","endChanged","slotLocked","prototype","onNextDay","daysNb","viewMode","start","add","emit","isAllSlotNotAvailable","_this","days","length","filter","day","daysAvailability","get","key","getAvailabilities","getSessionTitle","time","datetime","value","format","sessions","has","end","getSessionTooltip","comment","onTimeSlotClicked","isSlotBusy","isSlotEarly","isDateTimeInSessionsFromCurrentUser","isSlotInSession","source","removeSession","mmtStart","mmtEnd","clone","onlineSession","duration","addSession","Date","toJSON","id","toDate","pause","nb_persons","event_type","bodyConfiguration","calendar","info","user","isDayBusy","daysBusySlotNumber","daysAvailabilitySlotNumber","busySlots","earlySlots","pauseSlots","sessionsSlots","isSlotSessionEnd","sessionsEndSlots","Component","args","selector","template","Input","Output","CalendarHeaderComponent","switchedView","Object","defineProperty","_viewMode","switchView","onSwitchedView","onStartChanged","goToToday","isToday","previousDay","subtract","nextDay","CalendarComponent","cd","name","max_persons","booking_delay","price","start_date","end_date","start_time","end_time","calendarConfiguration","cta","next","previous","today","back_today","three_days","week","title","subtitle","availability","empty","slot","viewModeChanged","sessionCreated","_sessionsEntries","sessionsEntries","loadCalendar","setViewMode","splitRangeToNextTime","slotTimeRange","slotDuration","mmtTime","getMinutesDifference","minutes","geStartEndFromStartAndSessionDuration","twix","iterate","ngOnChanges","setCalendar","Set","Map","calendarStart","startOf","calendarEnd","endOf","loadEvents","setDateRange","loadAvailabilities","daysRange","hasNext","availableDay","push","set","onSwithedView","onSessionAdded","onSessionRemoved","delete","console","log","realDuration","onlineSessionStart","onlineSessionEnd","forEach","avbs","slotsNumber","mmtDay","hour","mmtDayStartTime","isBefore","minMmtStartTime","mmtDayEndTime","timeRange","isBetween","timeInnerRange","iterateInner","mmtEarlyStart","timeEarlierRange","isSameOrAfter","mmtEarlyEnd","mmtPauseEnd","timePauseRange","timeEarlyRange","Array","isArray","__spread","isSameOrBefore","mmtEventStart","buildinBusySlot","buildingEarliestSlot","markForCheck","mmtEventEnd","isValid","error","eventsTimeRange","_a","indexOf","dayBusyNumber","earliestTimeRange","ChangeDetectorRef","NgxCalendarModule","NgModule","imports","CommonModule","FlexLayoutModule","MatIconModule","declarations","exports"],"mappings":"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","sourcesContent":["export interface Event {\n  id: string;\n  start: Date;\n  end: Date;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: any;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: any;\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: string;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): string[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.comment) {\n        return session.comment;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time) && !this.isSlotInSession(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n    } else if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session};\n      this.removeSession(source);\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      id: null,\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.pause || 0,\n      duration: this.onlineSession.duration,\n      nb_persons: 1,\n      event_type: EventType.session,\n      comment: this.bodyConfiguration.calendar.session.info,\n      user: this.user\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occupÃ©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus tÃ´t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessions && this.sessions.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsEndSlots && this.sessionsEndSlots.has(datetime);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: string;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: string) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: string) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to generate a personal calendar\n   */\n  @Input() user: any;\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    id: null,\n    comment: '',\n    name: '',\n    max_persons: 1,\n    booking_delay: 1,\n    duration: 15,\n    pause: 0,\n    price: 10,\n    start_date: '2019-01-01',\n    end_date: '2030-12-31',\n    start_time: '08:00',\n    end_time: '19:00'\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'prÃ©cÃ©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir Ã  la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'rÃ©server votre crÃ©neau',\n      subtitle: 'toutes les disponibilitÃ©s',\n      availability: {\n        empty: 'Aucune disponibilitÃ©',\n        slot: 'Prochaine disponibilitÃ©',\n      },\n      session: {\n        info: 'CrÃ©neau vÃ©rrouillÃ©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n    }\n    this.loadCalendar();\n  }\n\n  // Default View Mode of Week Component\n  _viewMode = 'week';\n\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  static geStartEndFromStartAndSessionDuration(start: Moment, end: Moment, duration: number): {start: Moment, end: Moment} {\n    const eventsTimeRange: TwixIter = start.twix(end).iterate(duration, 'minutes');\n\n    return {\n      start,\n      end\n    };\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.sessions = new Map();\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay);\n    this.end = moment(this.start).add(6, 'days');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.loadEvents(this.start, this.end);\n    this.setDateRange(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    this.daysAvailability = new Map();\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    this.days = [];\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: string) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    console.log('online', this.onlineSession);\n    // session duration\n    this.realDuration = this.onlineSession.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.start_date, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.end_date, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.start_time, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.end_time, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n        this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    while (timeEarlyRange.hasNext()) {\n      const time: Twix = timeEarlyRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n      while (timePauseRange.hasNext()) {\n        const time: Twix = timePauseRange.next();\n        const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n        if (mmtTime.isSameOrAfter(mmtEarlyEnd) && mmtTime.isBefore(mmtPauseEnd)) {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    if (!this.onlineSession) {\n      return;\n    }\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n\n    console.log('start/end', start, end);\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries = [\n        ...this._sessionsEntries.filter((session: Session) => {\n          if (moment(session.start).isSameOrAfter(start) &&\n            moment(session.end).isSameOrBefore(end)) {\n            let mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n            console.log('busy slot', mmtEventStart);\n            mmtEventStart = this.buildinBusySlot(mmtEventStart, session);\n            console.log('busy slot', mmtEventStart);\n            this.buildingEarliestSlot(mmtEventStart);\n\n            return true;\n          }\n\n          return false;\n        })\n      ];\n    }\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(mmtEventStart: Moment, session: Session): Moment {\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isBefore(mmtEventEnd)) {\n      console.error('invalid dates');\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.duration, 'minutes');\n\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n\n        if ((!session.user ||\n          (session.user &&\n            this.user &&\n            session.user.id !== this.user.id))) {\n          let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n            this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n          dayBusyNumber++;\n          this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n          this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n        }\n        if (session.user && this.user && session.user.id === this.user.id) {\n          this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n          if (!eventsTimeRange.hasNext()) {\n            this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n          }\n        }\n      }\n    }\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(mmtEventStart: Moment) {\n    if (!mmtEventStart || !this.realDuration) {\n      return;\n    }\n\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.duration) + this.onlineSession.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.duration);\n      /* IF the busy slot is in availability and not already in busySloits we count it */\n      if (this.daysAvailability && this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).indexOf(time.format('HH:mm')) >= 0) {\n        let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n          this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n        dayBusyNumber++;\n        this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n      }\n      this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  MatIconModule,\n} from '@angular/material';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n"]}