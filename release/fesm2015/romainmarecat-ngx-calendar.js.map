{"version":3,"file":"romainmarecat-ngx-calendar.js","sources":["ng://@romainmarecat/ngx-calendar/lib/shared/event/event.ts","ng://@romainmarecat/ngx-calendar/lib/shared/session/session.service.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-body/calendar-body.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar-header/calendar-header.component.ts","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.html","ng://@romainmarecat/ngx-calendar/lib/calendar/calendar.component.ts","ng://@romainmarecat/ngx-calendar/lib/ngx-calendar.module.ts","ng://@romainmarecat/ngx-calendar/public-api.ts","ng://@romainmarecat/ngx-calendar/romainmarecat-ngx-calendar.ts"],"sourcesContent":["export interface Event {\n  id: string;\n  start: Date;\n  end: Date;\n  comment?: string;\n  custom_title?: string;\n  group_booking?: string;\n  pause?: number;\n  user?: any;\n}\n\nexport enum EventType {\n  absence,\n  session,\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Session } from './session';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  sessionsEntries$: BehaviorSubject<Session[]> = new BehaviorSubject<Session[]>([]);\n\n  sessions: BehaviorSubject<Map<string, Session>> = new BehaviorSubject<Map<string, Session>>(new Map<string, Session>());\n\n  constructor() {\n  }\n}\n","<div class=\"calendar-body-wrapper\">\n  <table class=\"calendar-body-table-wrapper table table-bordered\">\n    <thead class=\"calendar-body-table-head\">\n    <tr class=\"calendar-body-head-day-row\"\n        *ngIf=\"viewMode !== 'day'\">\n      <th class=\"calendar-body-day-header text-center\"\n          *ngFor=\"let day of days\">\n        <span class=\"truncate\">{{ day.title }}</span>\n      </th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class=\"calendar-body-row\">\n      <td class=\"calendar-body-column-content text-center\"\n          [attr.id]=\"day.key\"\n          *ngFor=\"let day of days; let keyDay = index\">\n        <div class=\"time-slot\"\n             [class.busy]=\"isSlotBusy(day, time)\"\n             [class.early]=\"isSlotEarly(day, time)\"\n             [class.session]=\"isSlotInSession(day, time)\"\n             [class.session-start]=\"isSlotSessionStart(day, time)\"\n             [class.session-end]=\"isSlotSessionEnd(day, time)\"\n             *ngFor=\"let time of getAvailabilities(day.key)\">\n          <div class=\"time-content\">\n            <button type=\"button\"\n                    class=\"slot-available\"\n                    (click)=\"onTimeSlotClicked(day, time)\"\n                    *ngIf=\"!isDateTimeInSessionsFromCurrentUser(day, time); else sessionTitle\">\n              <span class=\"default-time\">{{ time }}</span>\n            </button>\n            <ng-template #sessionTitle>\n              <button type=\"button\"\n                      class=\"slot-session\">\n                {{ getSessionTitle(day, time)}}\n              </button>\n            </ng-template>\n            <a class=\"link-close\" (click)=\"onTimeSlotClicked(day, time)\">\n              <mat-icon class=\"icon-close\"\n                        *ngIf=\"isDateTimeInSessionsFromCurrentUser(day, time)\">\n                close\n              </mat-icon>\n            </a>\n          </div>\n          <div class=\"slot-busy\"\n               *ngIf=\"getAvailabilities(day.key).length <= 0 || isDayBusy(day, time)\">\n            <span>{{bodyConfiguration.calendar.availability.empty}}</span>\n          </div>\n        </div>\n        <div class=\"next-slot\"\n             *ngIf=\"isAllSlotNotAvailable() && keyDay === days.length-1\">\n          <button type=\"button\"\n                  role=\"button\"\n                  [title]=\"bodyConfiguration.calendar.availability.slot\"\n                  (click)=\"onNextDay()\">\n            <span>{{ bodyConfiguration.calendar.availability.slot }}</span>\n            <mat-icon>keyboard_arrow_right</mat-icon>\n          </button>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\nimport { Day } from '../../shared/day/day';\nimport { EventType } from '../../shared/event/event';\nimport { OnlineSession } from '../../shared/session/online-session';\nimport { Session } from '../../shared/session/session';\nimport { SessionService } from '../../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-body',\n  templateUrl: './calendar-body.component.html',\n  styleUrls: ['./calendar-body.component.scss']\n})\nexport class CalendarBodyComponent implements OnInit {\n  /**\n   * User could be passed to show session owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * current online session\n   */\n  @Input() onlineSession: OnlineSession;\n  /**\n   * View mode input\n   */\n  @Input() viewMode: string;\n  /**\n   * Start day week\n   */\n  @Input() start: Moment;\n  /**\n   * End day week\n   */\n  @Input() end: Moment;\n  /**\n   * Day of curretn week\n   */\n  @Input() days: Array<Day>;\n\n  @Input() daysAvailability: Map<string, string[]>;\n  @Input() daysBusySlotNumber: Map<string, number>;\n  @Input() daysAvailabilitySlotNumber: Map<string, number>;\n  @Input() busySlots: Set<string>;\n  @Input() earlySlots: Set<string>;\n  @Input() pauseSlots: Set<string>;\n  @Input() sessionsSlots: Set<string>;\n  @Input() sessionsEndSlots: Set<string>;\n  @Input() sessionsStartSlots: Set<string>;\n  sessions: Map<string, Session>;\n  /**\n   * Configuration body\n   */\n  @Input() bodyConfiguration: CalendarConfiguration;\n\n  @Output() sessionAdded: EventEmitter<Session> = new EventEmitter<Session>();\n  @Output() sessionRemoved: EventEmitter<{key: string, session: Session}>\n    = new EventEmitter<{key: string, session: Session}>();\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() endChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @Output() slotLocked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private sessionService: SessionService) {\n  }\n\n  ngOnInit() {\n    this.sessionService.sessions\n      .subscribe((sessions) => {\n        this.sessions = sessions;\n      });\n  }\n\n  /**\n   * On click next day button, trigger switch start\n   */\n  onNextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.startChanged.emit(this.start);\n  }\n\n  /**\n   * If all slot is not avalaibles all all days\n   */\n  isAllSlotNotAvailable(): boolean {\n    if (this.days && this.days.length > 0) {\n      return this.days.filter((day) => this.daysAvailability.get(day.key).length > 0).length === 0;\n    }\n  }\n\n  /**\n   * All Availabilities by key: string, title: string, value: Moment\n   */\n  getAvailabilities(day: string): string[] {\n    return this.daysAvailability.get(day);\n  }\n\n  getSessionTitle(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session: Session = this.sessions.get(datetime);\n      return moment(session.start).format('HH:mm') + ' - ' + moment(session.end).format('HH:mm');\n    }\n    return '';\n  }\n\n  getSessionTooltip(day: Day, time: string): string {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n    if (this.sessions && this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      if (session.comment) {\n        return session.comment;\n      }\n    }\n\n    return '';\n  }\n\n  onTimeSlotClicked(day: Day, time: string) {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    if (this.isSlotBusy(day, time) || this.isSlotEarly(day, time)) {\n      this.slotLocked.emit(true);\n      return;\n    }\n\n    if (!this.isDateTimeInSessionsFromCurrentUser(day, time)) {\n      const mmtStart = moment(datetime, 'YYYY-MM-DDHH:mm');\n      const mmtEnd = mmtStart.clone().add(this.onlineSession.duration, 'minutes');\n      this.addSession(mmtStart, mmtEnd);\n      return;\n    }\n\n    if (this.sessions.has(datetime)) {\n      const session = this.sessions.get(datetime);\n      const source = {key: datetime, session};\n      this.removeSession(source);\n      return;\n    }\n  }\n\n  addSession(start: Moment, end: Moment) {\n\n    // To prevent a stringify Date without good timezone\n    Date.prototype.toJSON = function() {\n      return moment(this).format();\n    };\n\n    // Create session\n    const session: Session = {\n      id: null,\n      start: start.toDate(),\n      end: end.toDate(),\n      pause: this.onlineSession.pause || 0,\n      duration: this.onlineSession.duration,\n      nb_persons: 1,\n      event_type: EventType.session,\n      comment: this.bodyConfiguration.calendar.session.info,\n      user: this.user,\n      customers: [this.customer]\n    };\n    this.sessionAdded.emit(session);\n  }\n\n  removeSession(source: {key: string, session: Session}) {\n    this.sessionRemoved.emit(source);\n  }\n\n  /**\n   * If day is busy (occup√©) by current key string\n   */\n  isDayBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.daysBusySlotNumber && this.daysAvailabilitySlotNumber\n      && this.daysBusySlotNumber.has(datetime) && this.daysAvailabilitySlotNumber.has(datetime)\n      && this.daysBusySlotNumber.get(datetime) >= this.daysAvailabilitySlotNumber.get(datetime);\n  }\n\n  /**\n   * If slot is busy by date\n   */\n  isSlotBusy(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.busySlots && this.busySlots.has(datetime);\n  }\n\n  /**\n   * if slot is on previous (date plus t√¥t)\n   */\n  isSlotEarly(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return (this.earlySlots && this.earlySlots.has(datetime))\n      || (this.pauseSlots && this.pauseSlots.has(datetime));\n  }\n\n  /**\n   * is Slot in current activities\n   */\n  isSlotInSession(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots && this.sessionsSlots.has(datetime);\n  }\n\n  isDateTimeInSessionsFromCurrentUser(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return this.sessions &&\n      this.sessions.has(datetime) &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')) &&\n      this.sessionsStartSlots.has(datetime) &&\n      this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm'));\n  }\n\n  isSlotSessionStart(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    return this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsStartSlots.has(datetime);\n  }\n\n  isSlotSessionEnd(day: Day, time: string): boolean {\n    const datetime: string = day.value.format('YYYY-MM-DD') + time;\n\n    const session = this.sessions.get(datetime);\n\n    return (this.sessionsSlots &&\n      this.sessionsSlots.has(datetime) &&\n      this.sessionsEndSlots.has(datetime)) ||\n      (this.sessionsStartSlots.has(datetime) &&\n        session &&\n        this.sessionsEndSlots.has(moment(session.end).format('YYYY-MM-DDHH:mm')));\n  }\n}\n","<div fxLayout=\"row wrap\"\n     fxLayoutAlign=\"start stretch\"\n     fxLayout.xs=\"column\"\n     fxLayoutAlign.xs=\"start center\"\n     fxLayoutGap.xs=\"10px\"\n     *ngIf=\"headerConfiguration\">\n\n  <div class=\"left-actions\"\n       fxLayout=\"row\"\n       fxLayoutAlign=\"start stretch\"\n       fxLayoutGap=\"10px\"\n       fxLayout.xs=\"row\"\n       fxLayoutAlign.xs=\"center stretch\"\n       fxLayoutGap.xs=\"10px\">\n    <button class=\"button-actions\"\n            (click)=\"previousDay()\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.cta.previous\">\n      <mat-icon>keyboard_arrow_left</mat-icon>\n    </button>\n    <button class=\"button-actions\"\n            (click)=\"nextDay()\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.cta.next\">\n      <mat-icon>keyboard_arrow_right</mat-icon>\n    </button>\n    <button class=\"button-actions\"\n            [title]=\"headerConfiguration.calendar.back_today\"\n            [disabled]=\"isToday()\"\n            (click)=\"goToToday()\"\n            role=\"button\">\n      <mat-icon>today</mat-icon>\n    </button>\n  </div>\n  <div class=\"right-actions\"\n       fxLayout=\"row wrap\"\n       fxLayoutAlign=\"end stretch\"\n       fxLayoutGap=\"10px\"\n       fxLayout.xs=\"row wrap\"\n       fxLayoutAlign.xs=\"center stretch\"\n       fxLayoutGap.xs=\"10px\">\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.today\"\n            [disabled]=\"true\"\n            [class.hide-on-small-only]=\"end?.format('YYYY-MM-DD') !== start?.format('YYYY-MM-DD')\">\n      <span>{{ start?.format('LL') }}</span>\n      <span *ngIf=\"end?.format('YYYY-MM-DD') !== start?.format('YYYY-MM-DD')\">\n        - {{ end?.format('LL') }}\n      </span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.week\"\n            [class.active]=\"viewMode === 'week'\"\n            (click)=\"switchView('week')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_week</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.week }}</span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.three_days\"\n            [class.active]=\"viewMode === 'three_days'\"\n            (click)=\"switchView('three_days')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_column</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.three_days }}</span>\n    </button>\n    <button class=\"button-actions\"\n            type=\"button\"\n            role=\"button\"\n            [title]=\"headerConfiguration.calendar.day\"\n            [class.active]=\"viewMode === 'day'\"\n            (click)=\"switchView('day')\"\n            fxHide.lt-md=\"true\">\n      <mat-icon>view_day</mat-icon>\n      <span fxHide.lt-md=\"true\">{{ headerConfiguration.calendar.day }}</span>\n    </button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\nimport { CalendarConfiguration } from '../../shared/configuration/calendar-configuration';\n\nconst moment = moment_;\n\n@Component({\n  selector: 'lib-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss']\n})\nexport class CalendarHeaderComponent {\n  /**\n   * Start date\n   */\n  @Input() start: Moment;\n  /**\n   * End date\n   */\n  @Input() end: Moment;\n  /**\n   * Switch view event\n   */\n  @Output() switchedView: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Start day changed event\n   */\n  @Output() startChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  /**\n   * Configuration header\n   */\n  @Input() headerConfiguration: CalendarConfiguration;\n\n  /**\n   * Display mode\n   */\n  private _viewMode: string;\n\n  /**\n   * getter of private _viewMode\n   */\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  /**\n   * Setter of switch view\n   */\n  @Input() set viewMode(viewMode) {\n    this.switchView(viewMode);\n  }\n\n  /**\n   * Switch current view to another\n   */\n  switchView(viewMode: string) {\n    this._viewMode = viewMode;\n    this.onSwitchedView(viewMode);\n  }\n\n  /**\n   * Emitter of view\n   */\n  onSwitchedView(viewMode: string) {\n    this.switchedView.emit(viewMode);\n  }\n\n  /**\n   * Emitter of start date moment\n   */\n  onStartChanged(start: Moment) {\n    this.startChanged.emit(start);\n  }\n\n  /**\n   * return to now on start date\n   */\n  goToToday() {\n    this.start = moment();\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Check if start is equal to today\n   */\n  isToday() {\n    return moment() === moment(this.start);\n  }\n\n  /**\n   * Go to previous day\n   */\n  previousDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).subtract(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n\n  /**\n   * Go to new day\n   */\n  nextDay() {\n    let daysNb = 1;\n    if (this.viewMode === 'week') {\n      daysNb = 7;\n    }\n    this.start = moment(this.start).add(daysNb, 'day');\n    this.onStartChanged(this.start);\n  }\n}\n","<div class=\"week-calendar-wrapper\">\n  <div class=\"week-calendar-header\">\n\n\n    <div class=\"week-calendar-title\">\n\n      <lib-calendar-header [start]=\"start\"\n                           [end]=\"end\"\n                           [headerConfiguration]=\"calendarConfiguration\"\n                           [viewMode]=\"viewMode\"\n                           (switchedView)=\"onSwithedView($event)\"\n                           (startChanged)=\"onStartChanged($event)\"></lib-calendar-header>\n\n    </div>\n\n  </div>\n\n  <div>\n\n\n    <lib-calendar-body [bodyConfiguration]=\"calendarConfiguration\"\n                       [onlineSession]=\"onlineSession\"\n                       [days]=\"days\"\n                       [viewMode]=\"viewMode\"\n                       [start]=\"start\"\n                       [end]=\"end\"\n                       [daysAvailability]=\"daysAvailability\"\n                       [daysBusySlotNumber]=\"daysBusySlotNumber\"\n                       [daysAvailabilitySlotNumber]=\"daysAvailabilitySlotNumber\"\n                       [busySlots]=\"busySlots\"\n                       [user]=\"user\"\n                       [customer]=\"customer\"\n                       [earlySlots]=\"earlySlots\"\n                       [pauseSlots]=\"pauseSlots\"\n                       [sessionsSlots]=\"sessionsSlots\"\n                       [sessionsStartSlots]=\"sessionsStartSlots\"\n                       [sessionsEndSlots]=\"sessionsEndSlots\"\n                       (startChanged)=\"onStartChanged($event)\"\n                       (sessionAdded)=\"onSessionAdded($event)\"\n                       (sessionRemoved)=\"onSessionRemoved($event)\"\n                       *ngIf=\"start && end && days && viewMode\"></lib-calendar-body>\n\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Twix, TwixIter } from 'twix';\nimport 'twix';\nimport { CalendarConfiguration } from '../shared/configuration/calendar-configuration';\nimport { Day } from '../shared/day/day';\nimport { OnlineSession } from '../shared/session/online-session';\nimport { Session } from '../shared/session/session';\nimport { SessionService } from '../shared/session/session.service';\n\nconst moment = moment_;\n\n@Component({\n  // tslint:disable\n  selector: 'ngx-calendar',\n  // tslint:enable\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnChanges {\n  /**\n   * User could be passed to show the owner\n   */\n  @Input() user: any;\n  /**\n   * Customer could be passed to generate a personal calendar\n   */\n  @Input() customer: any;\n  /**\n   * Online sessions definition\n   */\n  @Input() onlineSession: OnlineSession = {\n    id: null,\n    comment: '',\n    name: '',\n    max_persons: 1,\n    booking_delay: 1,\n    duration: 15,\n    pause: 0,\n    price: 10,\n    start_date: '2019-01-01',\n    end_date: '2030-12-31',\n    start_time: '08:00',\n    end_time: '19:00'\n  };\n  /**\n   * Start day of calendar (could be updated)\n   */\n  @Input() start: Moment = moment();\n  /**\n   * End day of calendar (could be updated but reewriten on switch week mode\n   */\n  @Input() end: Moment = moment();\n  /**\n   * Configuration calendar\n   */\n  @Input() calendarConfiguration: CalendarConfiguration = {\n    calendar: {\n      cta: {\n        next: 'suivant',\n        previous: 'pr√©c√©dent',\n      },\n      today: 'aujourd\\'hui',\n      back_today: 'revenir √† la date d\\'aujourd\\'hui',\n      day: 'jour',\n      three_days: '3 jours',\n      week: 'semaine',\n      title: 'r√©server votre cr√©neau',\n      subtitle: 'toutes les disponibilit√©s',\n      availability: {\n        empty: 'Aucune disponibilit√©',\n        slot: 'Prochaine disponibilit√©',\n      },\n      session: {\n        info: 'Cr√©neau v√©rrouill√©'\n      }\n    }\n  };\n  /**\n   * When user swhitch view mode event\n   */\n  @Output() viewModeChanged: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Session created event\n   */\n  @Output() sessionCreated: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Session removed event\n   */\n  @Output() sessionRemoved: EventEmitter<Session> = new EventEmitter<Session>();\n  /**\n   * Array of selectable days from start to end\n   */\n  days: Array<Day> = [];\n  /**\n   * Slot Duration in minutes\n   */\n  realDuration: number;\n  /**\n   * During days from start to end, list of entries that available\n   */\n  daysAvailability: Map<string, string[]>;\n  /**\n   * Number of busy slot in each day\n   */\n  daysBusySlotNumber: Map<string, number>;\n  /**\n   * Number of available slot in each day\n   */\n  daysAvailabilitySlotNumber: Map<string, number>;\n  /**\n   * Set of datetime who reprensents availability\n   */\n  busySlots: Set<string>;\n  /**\n   * set of datetime who represents over extends busy slot\n   */\n  earlySlots: Set<string>;\n  /**\n   * set of datetime who represents pause slot\n   */\n  pauseSlots: Set<string>;\n  /**\n   * set of datetime who represents session slot\n   */\n  sessionsSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsEndSlots: Set<string>;\n  /**\n   * set of datetime who represents end slot (not used in front)\n   */\n  sessionsStartSlots: Set<string>;\n  /**\n   * Map of sessions from current user\n   */\n  sessions: Map<string, Session>;\n  /**\n   * calendar start day after set full calendar informations\n   */\n  private calendarStart: Moment;\n  /**\n   * calendar end day after set full calendar informations\n   */\n  private calendarEnd: Moment;\n\n  constructor(private cd: ChangeDetectorRef,\n              private sessionService: SessionService) {\n  }\n\n  /**\n   * Sessions array loaded by parent component\n   */\n  _sessionsEntries: Session[] = [];\n\n  get sessionsEntries(): Session[] {\n    return this._sessionsEntries;\n  }\n\n  @Input() set sessionsEntries(sessionsEntries: Session[]) {\n    if (sessionsEntries.length) {\n      this._sessionsEntries = sessionsEntries;\n    }\n    this.loadCalendar();\n  }\n\n  // Default View Mode of Week Component\n  _viewMode = 'week';\n\n  get viewMode(): string {\n    return this._viewMode;\n  }\n\n  @Input() set viewMode(viewMode) {\n    this._viewMode = viewMode;\n    this.setViewMode();\n  }\n\n  static splitRangeToNextTime(slotTimeRange: TwixIter, slotDuration: number): {time: Twix, mmtTime: Moment} {\n    const time: Twix = slotTimeRange.next();\n    return {time, mmtTime: CalendarComponent.getMinutesDifference(moment(time.toDate()), slotDuration)};\n  }\n\n  static getMinutesDifference(mmtTime: Moment, slotDuration: number): Moment {\n    if (mmtTime.minutes() % slotDuration !== 0) {\n      mmtTime.minutes(mmtTime.minutes() - (mmtTime.minutes() % slotDuration));\n    }\n\n    return mmtTime;\n  }\n\n  /**\n   * Inspect all changes\n   */\n  ngOnChanges() {\n    this.loadCalendar();\n  }\n\n  /**\n   * Set Default variables\n   */\n  setCalendar() {\n    this.days = [];\n    this.daysAvailability = new Map();\n    this.sessionsSlots = new Set();\n    this.sessionsEndSlots = new Set();\n    this.sessionsStartSlots = new Set();\n    this.earlySlots = new Set();\n    this.pauseSlots = new Set();\n    this.busySlots = new Set();\n    this.daysBusySlotNumber = new Map();\n    this.sessions = new Map();\n    this.sessionService.sessions.next(this.sessions);\n  }\n\n  /**\n   * Set View Mode with week, day, 3 days\n   * Init start, end,\n   *\n   */\n  setViewMode() {\n    if (this.viewMode === 'day') {\n      this.end = this.start;\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    } else if (this.viewMode === 'three_days') {\n      this.end = moment(this.start).add(2, 'days');\n      this.calendarStart = moment(this.start).startOf('day');\n      this.calendarEnd = moment(this.end).endOf('day');\n      return;\n    }\n    // Init first day week number\n    const firstDay = 0;\n    // If empty start date then start to today\n    if (!this.start) {\n      this.start = moment();\n    }\n    this.start = moment(this.start).day(firstDay).startOf('day');\n    this.end = moment(this.start).add(6, 'days').endOf('day');\n\n    this.calendarStart = moment(this.start).startOf('day');\n    this.calendarEnd = moment(this.end).endOf('day');\n  }\n\n  /**\n   * On start/viewMode changed, do a recalculate of init start, end\n   * days, daysAvailability and viewMode\n   */\n  loadCalendar() {\n    this.setCalendar();\n    this.setViewMode();\n    this.setDateRange(this.start, this.end);\n    this.loadEvents(this.start, this.end);\n    this.loadAvailabilities();\n  }\n\n  /**\n   * Add available days from start to end dates\n   */\n  setDateRange(start: Moment, end: Moment) {\n    // Days range from start to end\n    const daysRange: TwixIter = start\n      .twix(end)\n      .iterate(1, 'days');\n    // Loading all days\n    while (daysRange.hasNext()) {\n      const availableDay: Twix = daysRange.next();\n      this.days.push({\n        title: availableDay.format('DD/MM/YYYY'),\n        key: availableDay.format('YYYY-MM-DD'),\n        value: moment(availableDay.toDate())\n      });\n      this.daysAvailability.set(availableDay.format('YYYY-MM-DD'), []);\n    }\n  }\n\n  /**\n   * On switch date range\n   */\n  onSwithedView(viewMode: string) {\n    this.viewMode = viewMode;\n    this.viewModeChanged.emit(viewMode);\n    this.loadCalendar();\n  }\n\n  /**\n   * On start change event\n   */\n  onStartChanged(start: Moment) {\n    this.start = start;\n    this.loadCalendar();\n  }\n\n  /**\n   * On session added on click event\n   */\n  onSessionAdded(session: Session) {\n    this.sessions.set(moment(session.start).format('YYYY-MM-DDHH:mm'), session);\n    this.sessionService.sessions.next(this.sessions);\n    this.addSession(session);\n    this.sessionCreated.emit(session);\n  }\n\n  /**\n   * On removed event\n   */\n  onSessionRemoved(source: {key: string, session: Session}) {\n    this.sessions.delete(source.key);\n    this.sessionService.sessions.next(this.sessions);\n    this.removeSession(source.session);\n    this.sessionRemoved.emit(source.session);\n  }\n\n  /**\n   * Load all time for each days\n   */\n  loadAvailabilities() {\n    // no online session no calendar\n    if (!this.daysAvailability || !this.onlineSession) {\n      return;\n    }\n    // session duration\n    this.realDuration = this.onlineSession.duration;\n    // session day start 00:00 - end 23:59\n    const onlineSessionStart: Moment = moment(this.onlineSession.start_date, 'YYYY-MM-DD').startOf('day');\n    const onlineSessionEnd: Moment = moment(this.onlineSession.end_date, 'YYYY-MM-DD').endOf('day');\n    this.daysAvailabilitySlotNumber = new Map();\n    this.daysAvailability.forEach((avbs, day) => {\n      let slotsNumber = 0;\n      // each day of days availability with start time 08:00\n      const mmtDay = moment(day, 'YYYY-MM-DD').hour(8);\n      const mmtDayStartTime = moment(day + this.onlineSession.start_time, 'YYYY-MMDDHH:mm');\n\n      // If session start time like 08:00 is before start today 00:00\n      if (mmtDayStartTime.isBefore(moment().startOf('day'))) {\n        return;\n      }\n      // booking delay\n      const minMmtStartTime = moment().add(this.onlineSession.booking_delay, 'hours');\n      // session time end\n      const mmtDayEndTime = moment(day + this.onlineSession.end_time, 'YYYY-MM-DDHH:mm');\n      mmtDayEndTime.subtract(this.realDuration, 'minutes');\n      // slots iterator\n      const timeRange: TwixIter = mmtDayStartTime.twix(mmtDayEndTime)\n        .iterate(this.onlineSession.duration, 'minutes');\n      if (this.calendarStart && this.calendarEnd && mmtDay.isBetween(onlineSessionStart, onlineSessionEnd)) {\n        while (timeRange.hasNext()) {\n          const time: Twix = timeRange.next();\n          const timeMmt: Moment = moment(time.toDate());\n          if (!timeMmt.isBefore(minMmtStartTime)) {\n            avbs.push(time.format('HH:mm'));\n            slotsNumber++;\n          }\n        }\n      }\n      this.daysAvailabilitySlotNumber.set(day, slotsNumber);\n    });\n  }\n\n  /**\n   * Add session event in calendar\n   */\n  addSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterateInner(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlierRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlierRange, 'add', session, mmtEarlyStart, mmtStart);\n    /* building pause slots after event */\n    const mmtEarlyEnd = mmtEnd.clone();\n    mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n    const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n    const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n    this.handlePauseSlot(timePauseRange, 'add', session, mmtEarlyStart, mmtEarlyEnd);\n  }\n\n  /**\n   * Remove session event in Calendar\n   */\n  removeSession(session: Session) {\n    const mmtStart = moment(session.start);\n    const mmtEnd = moment(session.end);\n    const timeInnerRange: TwixIter = mmtStart.twix(mmtEnd).iterate(session.duration, 'minutes');\n    while (timeInnerRange.hasNext()) {\n      const time: Twix = timeInnerRange.next();\n      if (!timeInnerRange.hasNext()) {\n        this.sessionsEndSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      } else {\n        this.sessionsStartSlots.delete(time.format('YYYY-MM-DDHH:mm'));\n      }\n    }\n    /* removing early slots */\n    const mmtEarlyStart = mmtStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(\n      mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % session.duration) + session.duration);\n    const timeEarlyRange: TwixIter = mmtEarlyStart.twix(mmtStart).iterate(session.duration, 'minutes');\n    this.handleEarlySlot(timeEarlyRange, 'remove', session, mmtEarlyStart, mmtStart);\n    /* removing pause slots */\n    if (session.pause) {\n      const mmtEarlyEnd = mmtEnd.clone();\n      mmtEarlyEnd.subtract(mmtEarlyEnd.minutes() % session.duration);\n      const mmtPauseEnd = mmtEarlyEnd.clone().add(session.pause, 'minutes');\n      const timePauseRange: TwixIter = mmtEarlyEnd.twix(mmtPauseEnd).iterate(session.duration, 'minutes');\n      this.handlePauseSlot(timePauseRange, 'remove', session, mmtEarlyStart, mmtEarlyEnd);\n    }\n  }\n\n  /************************************************\n   ******************* Date functions **************\n   ************************************************\n   */\n  loadEvents(start: Moment, end: Moment) {\n    if (!this.onlineSession) {\n      return;\n    }\n    if (Array.isArray(this._sessionsEntries) && this._sessionsEntries.length) {\n      this._sessionsEntries.forEach((session: Session) => {\n        if (moment(session.start).isSameOrAfter(start) &&\n          moment(session.end).isSameOrBefore(end)) {\n          this.buildinBusySlot(session);\n          this.buildingEarliestSlot(session);\n        }\n      });\n    }\n  }\n\n  /**\n   * Slot locked\n   */\n  buildinBusySlot(session: Session): Moment {\n    const mmtEventStart = moment(session.start, 'YYYY-MM-DDHH:mm');\n    const mmtEventEnd = moment(session.end, 'YYYY-MM-DDHH:mm');\n\n    if (!mmtEventStart || !mmtEventStart.isValid()\n      || !mmtEventEnd || !mmtEventEnd.isValid()\n      || !mmtEventStart.isSameOrBefore(mmtEventEnd)) {\n      console.error('invalid dates', mmtEventStart, mmtEventEnd);\n      return null;\n    }\n    /* building busy slots by events */\n    const eventsTimeRange: TwixIter = mmtEventStart.twix(mmtEventEnd).iterate(session.duration, 'minutes');\n\n    while (eventsTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(eventsTimeRange, session.duration);\n      /* IF the busy slot is availabe and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD')) &&\n        !this.busySlots.has(time.format('YYYY-MM-DDHH:mm')) &&\n        !this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        if ((!session.customers ||\n          (session.customers &&\n            this.customer &&\n            !session.customers.map(c => c.id).includes(this.customer.id)))) {\n          this.addDayBusySlot(time);\n        }\n        if (session.customers && this.customer && session.customers.map(c => c.id).includes(this.customer.id)) {\n          this.setSessionSlot(eventsTimeRange, time, session);\n        }\n      }\n    }\n    this.sessionService.sessions.next(this.sessions);\n\n    return mmtEventStart;\n  }\n\n  /**\n   * Build in sessions Map only start session with its session\n   */\n  setSessionSlot(eventsTimeRange: TwixIter, time: Twix, session: Session) {\n    this.sessionsSlots.add(time.format('YYYY-MM-DDHH:mm'));\n    if (!eventsTimeRange.hasNext()) {\n      this.sessionsEndSlots.add(time.format('YYYY-MM-DDHH:mm'));\n      return;\n    }\n    this.sessions.set(time.format('YYYY-MM-DDHH:mm'), session);\n    this.sessionsStartSlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Slot before availability range\n   */\n  buildingEarliestSlot(session: Session) {\n    const mmtEventStart: Moment = moment(session.start, 'YYYY-MM-DDHH:mm');\n    if (!mmtEventStart || !this.realDuration) {\n      return;\n    }\n\n    /* building earliest slot before event */\n    const mmtEarlyStart = mmtEventStart.clone().subtract(this.realDuration, 'minutes');\n    mmtEarlyStart.minutes(mmtEarlyStart.minutes() -\n      (mmtEarlyStart.minutes() % this.onlineSession.duration) + this.onlineSession.duration);\n    const earliestTimeRange: TwixIter = mmtEarlyStart.twix(mmtEventStart).iterate(this.onlineSession.duration, 'minutes');\n    while (earliestTimeRange.hasNext()) {\n      const {time, mmtTime} = CalendarComponent.splitRangeToNextTime(earliestTimeRange, this.onlineSession.duration);\n      /* IF the busy slot is in availability and not already in busySlots we count it */\n      if (this.daysAvailability &&\n        this.daysAvailability.has(time.format('YYYY-MM-DD'))\n        && !this.busySlots.has(time.format('YYYY-MM-DDHH:mm'))\n        && this.daysAvailability.get(time.format('YYYY-MM-DD')).includes(time.format('HH:mm'))) {\n        this.addDayBusySlot(time);\n      }\n    }\n  }\n\n  /**\n   * Add in busy slot new unavailable time reference\n   */\n  addDayBusySlot(time: Twix) {\n    let dayBusyNumber = this.daysBusySlotNumber.has(time.format('YYYY-MM-DD')) ?\n      this.daysBusySlotNumber.get(time.format('YYYY-MM-DD')) : 0;\n    dayBusyNumber++;\n    this.daysBusySlotNumber.set(time.format('YYYY-MM-DD'), dayBusyNumber);\n    this.busySlots.add(time.format('YYYY-MM-DDHH:mm'));\n  }\n\n  /**\n   * Remove/add from pauseSlot sessions start/end interval\n   */\n  handlePauseSlot(timePauseRange: TwixIter, action: string, session: Session, start: Moment, end: Moment) {\n    while (timePauseRange.hasNext()) {\n      const time: Twix = timePauseRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(start) && mmtTime.isBefore(end)) {\n        if (action === 'remove') {\n          this.pauseSlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n        if (action === 'add') {\n          this.pauseSlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove/add from earlySlot all sessions\n   */\n  handleEarlySlot(timeEarlierRange: TwixIter,\n                  action: string,\n                  session: Session,\n                  mmtEarlyStart: Moment,\n                  mmtStart: Moment) {\n    while (timeEarlierRange.hasNext()) {\n      const time: Twix = timeEarlierRange.next();\n      const mmtTime: Moment = CalendarComponent.getMinutesDifference(moment(time.toDate()), session.duration);\n      if (mmtTime.isSameOrAfter(mmtEarlyStart) && mmtTime.isBefore(mmtStart)) {\n        if (action === 'add') {\n          this.earlySlots.add(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n\n        if (action === 'remove') {\n          this.earlySlots.delete(mmtTime.format('YYYY-MM-DDHH:mm'));\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CalendarBodyComponent } from './calendar/calendar-body/calendar-body.component';\nimport { CalendarHeaderComponent } from './calendar/calendar-header/calendar-header.component';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n  ],\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ],\n  exports: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n    CalendarBodyComponent,\n  ]\n})\nexport class NgxCalendarModule {\n}\n","/*\n * Public API Surface of ngx-calendar\n */\n\nexport * from './lib/ngx-calendar.module';\nexport * from './lib/calendar/calendar.component';\nexport * from './lib/calendar/calendar-body/calendar-body.component';\nexport * from './lib/calendar/calendar-header/calendar-header.component';\nexport * from './lib/shared/event/event';\nexport * from './lib/shared/day/day';\nexport * from './lib/shared/session/session';\nexport * from './lib/shared/session/online-session';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i0.…µ…µelementStart","i0.…µ…µtext","i0.…µ…µelementEnd","i0.…µ…µadvance","i0.…µ…µtextInterpolate","i0.…µ…µtemplate","i0.…µ…µproperty","i0.…µ…µlistener","i0.…µ…µtextInterpolate1","i0.…µ…µclassProp","i0.…µ…µattribute","moment"],"mappings":"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"}